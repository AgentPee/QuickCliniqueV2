// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickClinique.Models;

#nullable disable

namespace QuickClinique.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("QuickClinique.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(100)")
                        .HasColumnName("AppointmentID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateBooked")
                        .HasColumnType("date");

                    b.Property<int>("PatientId")
                        .HasColumnType("int(100)")
                        .HasColumnName("PatientID");

                    b.Property<int>("QueueNumber")
                        .HasColumnType("int(50)");

                    b.Property<string>("QueueStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReasonForVisit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int(100)")
                        .HasColumnName("ScheduleID");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AppointmentId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PatientId" }, "PatientID");

                    b.HasIndex(new[] { "ScheduleId" }, "ScheduleID");

                    b.ToTable("appointments", (string)null);
                });

            modelBuilder.Entity("QuickClinique.Models.Clinicstaff", b =>
                {
                    b.Property<int>("ClinicStaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(100)")
                        .HasColumnName("ClinicStaffID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClinicStaffId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EmailVerificationTokenExpiry")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int(100)")
                        .HasColumnName("UserID");

                    b.HasKey("ClinicStaffId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID");

                    b.ToTable("clinicstaff", (string)null);
                });

            modelBuilder.Entity("QuickClinique.Models.History", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(100)")
                        .HasColumnName("HistoryID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int(100)")
                        .HasColumnName("AppointmentID");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Idnumber")
                        .HasColumnType("int(100)")
                        .HasColumnName("IDnumber");

                    b.Property<int>("PatientId")
                        .HasColumnType("int(100)")
                        .HasColumnName("PatientID");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int(100)")
                        .HasColumnName("ScheduleID");

                    b.Property<string>("VisitReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HistoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AppointmentId" }, "AppointmentID");

                    b.HasIndex(new[] { "PatientId" }, "PatientID")
                        .HasDatabaseName("PatientID1");

                    b.HasIndex(new[] { "ScheduleId" }, "ScheduleID")
                        .HasDatabaseName("ScheduleID1");

                    b.ToTable("history", (string)null);
                });

            modelBuilder.Entity("QuickClinique.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(100)")
                        .HasColumnName("MessageID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(6)")
                        .HasDefaultValueSql("current_timestamp(6)");

                    b.Property<string>("Message1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Message");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int(100)")
                        .HasColumnName("ReceiverID");

                    b.Property<int>("SenderId")
                        .HasColumnType("int(100)")
                        .HasColumnName("SenderID");

                    b.HasKey("MessageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SenderId" }, "messages_ibfk_1");

                    b.HasIndex(new[] { "ReceiverId" }, "messages_ibfk_2");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("QuickClinique.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(100)")
                        .HasColumnName("NotificationID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int>("ClinicStaffId")
                        .HasColumnType("int(100)")
                        .HasColumnName("ClinicStaffID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IsRead")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("isRead");

                    b.Property<DateTime>("NotifDateTime")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int(100)")
                        .HasColumnName("PatientID");

                    b.HasKey("NotificationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClinicStaffId" }, "ClinicStaffID");

                    b.HasIndex(new[] { "PatientId" }, "PatientID")
                        .HasDatabaseName("PatientID2");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("QuickClinique.Models.Precord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(100)")
                        .HasColumnName("RecordID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<int>("Age")
                        .HasColumnType("int(50)");

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Bmi")
                        .HasColumnType("int(50)")
                        .HasColumnName("BMI");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Medications")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PatientId")
                        .HasColumnType("int(100)")
                        .HasColumnName("PatientID");

                    b.HasKey("RecordId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PatientId" }, "PatientID")
                        .HasDatabaseName("PatientID3");

                    b.ToTable("precords", (string)null);
                });

            modelBuilder.Entity("QuickClinique.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(100)")
                        .HasColumnName("ScheduleID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasMaxLength(6)
                        .HasColumnType("time(6)");

                    b.Property<string>("IsAvailable")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("isAvailable");

                    b.Property<TimeOnly>("StartTime")
                        .HasMaxLength(6)
                        .HasColumnType("time(6)");

                    b.HasKey("ScheduleId")
                        .HasName("PRIMARY");

                    b.ToTable("schedules", (string)null);
                });

            modelBuilder.Entity("QuickClinique.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(100)")
                        .HasColumnName("StudentID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EmailVerificationTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Idnumber")
                        .HasColumnType("int(100)")
                        .HasColumnName("IDnumber");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int(100)")
                        .HasColumnName("UserID");

                    b.HasKey("StudentId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID1");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("QuickClinique.Models.Usertype", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(100)")
                        .HasColumnName("UserID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.ToTable("usertypes", (string)null);
                });

            modelBuilder.Entity("QuickClinique.Models.Appointment", b =>
                {
                    b.HasOne("QuickClinique.Models.Student", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("appointments_ibfk_1");

                    b.HasOne("QuickClinique.Models.Schedule", "Schedule")
                        .WithMany("Appointments")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("appointments_ibfk_2");

                    b.Navigation("Patient");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("QuickClinique.Models.Clinicstaff", b =>
                {
                    b.HasOne("QuickClinique.Models.Usertype", "User")
                        .WithMany("Clinicstaffs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("clinicstaff_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuickClinique.Models.History", b =>
                {
                    b.HasOne("QuickClinique.Models.Appointment", "Appointment")
                        .WithMany("Histories")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("history_ibfk_2");

                    b.HasOne("QuickClinique.Models.Student", "Patient")
                        .WithMany("Histories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("history_ibfk_1");

                    b.HasOne("QuickClinique.Models.Schedule", "Schedule")
                        .WithMany("Histories")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("history_ibfk_3");

                    b.Navigation("Appointment");

                    b.Navigation("Patient");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("QuickClinique.Models.Message", b =>
                {
                    b.HasOne("QuickClinique.Models.Usertype", "Receiver")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("messages_ibfk_2");

                    b.HasOne("QuickClinique.Models.Usertype", "Sender")
                        .WithMany("MessageSenders")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("messages_ibfk_1");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("QuickClinique.Models.Notification", b =>
                {
                    b.HasOne("QuickClinique.Models.Clinicstaff", "ClinicStaff")
                        .WithMany("Notifications")
                        .HasForeignKey("ClinicStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("notification_ibfk_1");

                    b.HasOne("QuickClinique.Models.Student", "Patient")
                        .WithMany("Notifications")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("notification_ibfk_2");

                    b.Navigation("ClinicStaff");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("QuickClinique.Models.Precord", b =>
                {
                    b.HasOne("QuickClinique.Models.Student", "Patient")
                        .WithMany("Precords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("precords_ibfk_1");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("QuickClinique.Models.Student", b =>
                {
                    b.HasOne("QuickClinique.Models.Usertype", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("students_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuickClinique.Models.Appointment", b =>
                {
                    b.Navigation("Histories");
                });

            modelBuilder.Entity("QuickClinique.Models.Clinicstaff", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("QuickClinique.Models.Schedule", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("QuickClinique.Models.Student", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Histories");

                    b.Navigation("Notifications");

                    b.Navigation("Precords");
                });

            modelBuilder.Entity("QuickClinique.Models.Usertype", b =>
                {
                    b.Navigation("Clinicstaffs");

                    b.Navigation("MessageReceivers");

                    b.Navigation("MessageSenders");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
