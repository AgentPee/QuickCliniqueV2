@{
    ViewData["Title"] = "Home Page";
    Layout = "_Layout";
}

@section Styles {
    <link rel="stylesheet" href="~/css/dashboard.css" asp-append-version="true" />
}

<div class="main-content">
    <!-- Hero Section -->
    <section class="hero">
        <h1>University of Cebu Medical-Dental Clinic</h1>
        <p>Providing quality healthcare services to the UC community with compassion and excellence</p>
        <div class="hero-buttons">
            <a href="#dashboard" class="btn btn-primary"><i class="fas fa-calendar-check"></i> Book Appointment</a>
            <a href="#dental-schedule" class="btn btn-outline"><i class="fas fa-tooth"></i> Dental Schedule</a>
        </div>
    </section>

    <!-- Dashboard Section -->
    <section class="dashboard-section" id="dashboard">
        <h2 class="dashboard-header"><i class="fas fa-chart-line"></i> STUDENT DASHBOARD</h2>

        <div class="dashboard-grid">
            <!-- Appointment Booking -->
            <div class="appointment-card">
                <h3>Book New Appointment</h3>
                <form id="appointmentForm">
                    @Html.AntiForgeryToken()
                    <span class="validation-error" id="patientError"></span>
                    <div class="form-group">
                        <label for="appointmentDate">Select Date</label>
                        <input type="date" id="appointmentDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" required>
                        <small class="form-text text-muted">Only dates with available slots are selectable</small>
                        <span class="validation-error" id="dateError"></span>
                    </div>

                    <div class="form-group">
                        <label for="availableSlots">Available Time Slots</label>
                        <select id="availableSlots" required disabled>
                            <option value="">Select a date first</option>
                        </select>
                        <span class="validation-error" id="slotError"></span>
                        <div id="slotLoading" class="loading-message" style="display: none;">
                            <i class="fas fa-spinner fa-spin"></i> Loading available slots...
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="serviceRequired">Service Required</label>
                        <select id="serviceRequired" required>
                            <option value="">Select a Service</option>
                            <option value="medical-checkup">General Medical Checkup</option>
                            <option value="dental-checkup">Dental Checkup</option>
                            <option value="dental-cleaning">Dental Cleaning/Prophylaxis</option>
                            <option value="dental-pasta">Dental Pasta (Fillings)</option>
                            <option value="dental-extraction">Tooth Extraction</option>
                            <option value="consultation">Medical Consultation</option>
                            <option value="bp-monitoring">Blood Pressure Monitoring</option>
                            <option value="vaccination">Vaccination</option>
                            <option value="emergency">Emergency Care</option>
                        </select>
                        <span class="validation-error" id="serviceError"></span>
                    </div>

                    <div class="form-group">
                        <label for="symptoms">Symptoms/Concerns <small class="text-muted">(Optional)</small></label>
                        <textarea id="symptoms" placeholder="Describe your symptoms or concerns in detail (optional)..." rows="3"></textarea>
                        <span class="validation-error" id="symptomsError"></span>
                    </div>

                    <button type="submit" class="submit-appointment-btn" id="submitAppointment">
                        <i class="fas fa-calendar-check"></i> Submit Appointment Request
                    </button>
                </form>
                <div id="appointmentMessage" class="message-container"></div>
            </div>

            <!-- Real-Time Queue -->
            <div class="queue-card">
                <div class="queue-header">
                    <i class="fas fa-clock"></i> Real-Time Queue
                    <button class="refresh-btn" id="refreshQueue"><i class="fas fa-sync-alt"></i></button>
                </div>
                <div class="queue-info">
                    <h4>Now Serving:</h4>
                    <p id="nowServing">N/A (No consultation active)</p>
                </div>
                <div class="queue-info">
                    <h4>Waiting in line:</h4>
                    <p id="waitingCount">0 patient(s)</p>
                </div>
                <div class="queue-message" id="queueMessage">
                    <p>You have no active appointment in the queue.</p>
                </div>
                <div class="queue-info" style="margin-top: 15px;">
                    <h4>Your Queue Number:</h4>
                    <p id="userQueueNumber">-</p>
                </div>
                <div class="queue-last-updated" style="margin-top: 10px; font-size: 0.75rem; color: #6c757d; text-align: center;">
                    <i class="fas fa-circle" id="queueStatusIndicator" style="font-size: 0.5rem; color: #28a745;"></i>
                    <span id="queueLastUpdated">Loading...</span>
                </div>
            </div>
        </div>
    </section>

    <!-- Rest of the sections remain the same -->
    <!-- Dental Schedule Section -->
    <section class="section" id="dental-schedule">
        <!-- ... existing dental schedule content ... -->
    </section>

    <!-- Messaging Section -->
    <section class="messaging-section" id="messaging">
        <div class="messaging-header">
            <i class="fas fa-comments"></i> Clinic Communications
            <button class="refresh-messages-btn" onclick="loadMessages()">
                <i class="fas fa-sync-alt"></i>
            </button>
        </div>
        <div class="messaging-container">
            <div class="chat-header">
                <i class="fas fa-user-md"></i> Clinic Staff
            </div>
            <div class="chat-messages" id="chatMessages">
                <div class="message received">
                    <div class="message-content">
                        Welcome to QuickClinique! How can we assist you today?
                    </div>
                    <div class="message-time">Just now</div>
                </div>
            </div>
            <div class="chat-input">
                <input type="text" id="messageInput" placeholder="Type your message..." maxlength="500">
                <button class="send-btn" id="sendMessage">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </section>

    <!-- Dental Schedule Section -->
    <section class="section" id="dental-schedule">
        <div class="section-header">
            <h2>Dental Services Schedule</h2>
            <p>Plan your visit according to our specialized dental service days</p>
        </div>
        <div class="dental-schedule-section">
            <div class="schedule-grid">
                <div class="schedule-card">
                    <div class="schedule-icon">
                        <i class="fas fa-spa"></i>
                    </div>
                    <div class="schedule-day">Monday</div>
                    <div class="schedule-service">Cleaning Only</div>
                    <div class="schedule-desc">
                        Professional dental cleaning and prophylaxis services available all day.
                    </div>
                </div>

                <div class="schedule-card">
                    <div class="schedule-icon">
                        <i class="fas fa-fill-drip"></i>
                    </div>
                    <div class="schedule-day">Tuesday</div>
                    <div class="schedule-service">Pasta (Fillings)</div>
                    <div class="schedule-desc">
                        Dental fillings and restorative procedures available throughout the day.
                    </div>
                </div>

                <div class="schedule-card">
                    <div class="schedule-icon">
                        <i class="fas fa-teeth"></i>
                    </div>
                    <div class="schedule-day">Wednesday</div>
                    <div class="schedule-service">Extraction</div>
                    <div class="schedule-desc">
                        Tooth extraction services available from morning to afternoon.
                    </div>
                </div>

                <div class="schedule-card">
                    <div class="schedule-icon">
                        <i class="fas fa-fill-drip"></i>
                    </div>
                    <div class="schedule-day">Thursday</div>
                    <div class="schedule-service">Pasta (Fillings)</div>
                    <div class="schedule-desc">
                        Dental fillings and restorative procedures available throughout the day.
                    </div>
                </div>

                <div class="schedule-card">
                    <div class="schedule-icon">
                        <i class="fas fa-teeth"></i>
                    </div>
                    <div class="schedule-day">Friday</div>
                    <div class="schedule-service">Extraction</div>
                    <div class="schedule-desc">
                        Tooth extraction services available from morning to afternoon.
                    </div>
                </div>
            </div>

            <div style="margin-top: 30px; padding: 20px; background: #e8f5e9; border-radius: 8px; border-left: 4px solid #4CAF50;">
                <h4 style="color: #2e7d32; margin-bottom: 10px;"><i class="fas fa-info-circle"></i> Important Note:</h4>
                <p style="color: #555; margin: 0;">
                    Emergency dental services are available every day during clinic hours.
                    Please contact the clinic directly for urgent dental concerns.
                </p>
            </div>
        </div>
    </section>

    <!-- Mission & Vision Section -->
    <section class="section" id="mission">
        <div class="section-header">
            <h2>Our Mission & Vision</h2>
            <p>Guiding principles that drive our healthcare services</p>
        </div>
        <div class="mission-vision">
            <div class="vision-card">
                <h3><i class="fas fa-eye"></i> VISION</h3>
                <p>"As a Health Care Provider, the University of Cebu – Main goal is to render efficient Medical and Dental Services to the UC Community as a whole, and to promote good health and well-being of students that will highly contribute to their success."</p>
            </div>
            <div class="mission-card">
                <h3><i class="fas fa-bullseye"></i> MISSION</h3>
                <p>"Diverse implements, effective and accessible antidote for any malady and the health teaching that will be bestowed/ inculcated by the Clinicians to the minds of every individual who will be going to the Clinic are what the endeavor uses and does to ensure that the wellness of the health among UC populace is at hand."</p>
            </div>
        </div>
        <div class="staff-section">
            <h3 style="text-align: center; color: #4ECDC4; margin-bottom: 20px;">MEDICAL- DENTAL CLINIC</h3>
            <p style="text-align: center; font-style: italic; color: #666; margin-bottom: 30px;">"The UC Medical- Dental Clinic aims to promote good health and total well- being of the students, the teachers and the employees through prevention, diagnosis, treatment of disease, and education."</p>
        </div>
    </section>

    <!-- Staff Section -->
    <section class="section" id="staff">
        <div class="section-header">
            <h2>Our Medical & Dental Staff</h2>
            <p>Meet our dedicated healthcare professionals</p>
        </div>
        <div class="staff-section">
            <div class="staff-category">
                <h3>MEDICAL STAFF</h3>
                <div class="staff-grid">
                    <div class="staff-card">
                        <h4>Dr. Carolyn Go- Uang</h4>
                        <p>Medical Doctor</p>
                        <div class="staff-schedule">Schedule: 8:00 AM – 12:00 NN</div>
                    </div>
                    <div class="staff-card">
                        <h4>Dr. Jewel Ann Marie Abella</h4>
                        <p>Medical Doctor</p>
                        <div class="staff-schedule">Schedule: 8:00 AM – 12:00 NN (South Campus- Extension Clinic)</div>
                    </div>
                    <div class="staff-card">
                        <h4>Dr. Hermogina Jao- Co</h4>
                        <p>Medical Doctor</p>
                        <div class="staff-schedule">Schedule: 1:30 PM – 5:30 PM</div>
                    </div>
                    <div class="staff-card">
                        <h4>Dr. Rosalinda Margallo</h4>
                        <p>Medical Doctor</p>
                        <div class="staff-schedule">Schedule: 1:30 PM – 7:30 PM (South Campus- Extension Clinic)</div>
                    </div>
                </div>
            </div>

            <div class="staff-category">
                <h3>DENTAL STAFF</h3>
                <div class="staff-grid">
                    <div class="staff-card">
                        <h4>Dr. Concepcion Tundag</h4>
                        <p>Dentist</p>
                        <div class="staff-schedule">Schedule: 8:00 AM - 12:00 NN</div>
                    </div>
                    <div class="staff-card">
                        <h4>Dr. Cherryl Abineta- Asibal</h4>
                        <p>Dentist</p>
                        <div class="staff-schedule">Schedule: 8:00 AM - 5:00 PM</div>
                    </div>
                    <div class="staff-card">
                        <h4>Dr. Emmanuel Mercado</h4>
                        <p>Dentist</p>
                        <div class="staff-schedule">Schedule: 1:00 PM - 5:00 PM</div>
                    </div>
                    <div class="staff-card">
                        <h4>Dr. Frances Mae Licong</h4>
                        <p>Dentist</p>
                        <div class="staff-schedule">Schedule: 8:00 AM - 5:00 PM (High School/ Grade School)</div>
                    </div>
                </div>
            </div>

            <div class="staff-category">
                <h3>NURSING STAFF</h3>
                <div class="staff-grid">
                    <div class="staff-card">
                        <h4>Mrs. Paz Colina Po, BSN, RN</h4>
                        <p>Nurse</p>
                        <div class="staff-schedule">Schedule: 8:00 AM - 5:00 PM (High School/ Grade School)</div>
                    </div>
                    <div class="staff-card">
                        <h4>Mrs. Charlene Gallentes, BSN, RN</h4>
                        <p>Nurse</p>
                        <div class="staff-schedule">Schedule: 8:00 AM - 5:00 PM</div>
                    </div>
                    <div class="staff-card">
                        <h4>Dr. Lloyd Dabon, DMD, BSN, RN</h4>
                        <p>Nurse</p>
                        <div class="staff-schedule">Schedule: 1:30 PM - 9:30 PM</div>
                    </div>
                    <div class="staff-card">
                        <h4>Mrs. Nancy Ong, BSN, RN</h4>
                        <p>Nurse</p>
                        <div class="staff-schedule">Schedule: 8:00 AM - 5:00 PM (South Campus- Extension Clinic)</div>
                    </div>
                    <div class="staff-card">
                        <h4>Ms. Therese Bacalso, BSN, RN</h4>
                        <p>Nurse</p>
                        <div class="staff-schedule">Schedule: 10:30 AM - 7:30 PM (South Campus- Extension Clinic)</div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Objectives Section -->
    <section class="section" id="objectives">
        <div class="section-header">
            <h2>Department Objectives</h2>
            <p>Our commitment to comprehensive healthcare services</p>
        </div>
        <div class="objectives">
            <h3>DEPARTMENT OBJECTIVES:</h3>
            <ul class="objectives-list">
                <li>Provide preventive measures through BP taking and physical examination, oral examination and prophylaxis;</li>
                <li>Diagnose diseases based on the patient's history, clinical and laboratory findings;</li>
                <li>Give treatment to specific diseases based on diagnosis.</li>
                <li>Conduct Medical- Dental awareness and education through posters and counseling.</li>
            </ul>
        </div>
    </section>
</div>

@section Scripts {
    <script>
             // Enhanced appointment functionality
        let availableSlots = [];
        let availableDates = [];

        function initializeEnhancedAppointment() {
            const appointmentDate = document.getElementById('appointmentDate');
            const availableSlotsSelect = document.getElementById('availableSlots');

            // Initialize with empty slots
            availableSlotsSelect.innerHTML = '<option value="">Select a date first</option>';
            availableSlotsSelect.disabled = true;

            // Set minimum date to today
            const today = new Date().toISOString().split('T')[0];
            appointmentDate.min = today;

            // Load available dates when page loads
            loadAvailableDates().then(() => {
                // Once dates are loaded, set up the date input
                setupDateInput();
            });

            // Load available slots when date changes
            appointmentDate.addEventListener('change', function() {
                const selectedDate = this.value;
                if (selectedDate && isDateAvailable(selectedDate)) {
                    loadAvailableSlots(selectedDate);
                } else {
                    availableSlotsSelect.innerHTML = '<option value="">Selected date is not available</option>';
                    availableSlotsSelect.disabled = true;
                }
            });

            // Initialize appointment form
            const appointmentForm = document.getElementById('appointmentForm');
            appointmentForm.addEventListener('submit', handleEnhancedAppointmentSubmit);
        }

         // Handle enhanced appointment submission - FIXED SERVICE MAPPING & OPTIONAL SYMPTOMS
        async function handleEnhancedAppointmentSubmit(e) {
            e.preventDefault();

            const submitBtn = document.getElementById('submitAppointment');
            const messageContainer = document.getElementById('appointmentMessage');

            // Validate form (symptoms is now optional)
            if (!validateEnhancedAppointmentForm()) {
                showMessage('Please fix the errors above before submitting.', 'error');
                return;
            }

            // Show loading state
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
            messageContainer.innerHTML = '';

            try {
                // Get form values
                const scheduleId = document.getElementById('availableSlots').value;
                const serviceRequired = document.getElementById('serviceRequired').value;
                const symptoms = document.getElementById('symptoms').value;

                // Get patient ID from session (async)
                let patientId;
                try {
                    patientId = await getCurrentPatientId();
                } catch (error) {
                    showMessage(error.message, 'error');
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-calendar-check"></i> Submit Appointment Request';
                    return;
                }

                console.log('=== APPOINTMENT SUBMISSION DEBUG ===');
                console.log('Raw form values:');
                console.log('  scheduleId (raw):', scheduleId);
                console.log('  serviceRequired:', serviceRequired);
                console.log('  symptoms:', symptoms);
                console.log('  patientId:', patientId);

                // Check dropdown state
                const slotsDropdown = document.getElementById('availableSlots');
                console.log('Slots dropdown state:');
                console.log('  disabled:', slotsDropdown.disabled);
                console.log('  selectedIndex:', slotsDropdown.selectedIndex);
                console.log('  options count:', slotsDropdown.options.length);
                if (slotsDropdown.selectedIndex >= 0) {
                    console.log('  selected option text:', slotsDropdown.options[slotsDropdown.selectedIndex].text);
                    console.log('  selected option value:', slotsDropdown.options[slotsDropdown.selectedIndex].value);
                }

                // Validate schedule ID
                if (!scheduleId || scheduleId === '' || isNaN(parseInt(scheduleId))) {
                    showMessage('Please select a date and time slot before submitting.', 'error');
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-calendar-check"></i> Submit Appointment Request';
                    return;
                }

                // Validate that serviceRequired is not empty
                if (!serviceRequired || serviceRequired.trim() === '') {
                    showMessage('Please select a service before submitting.', 'error');
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-calendar-check"></i> Submit Appointment Request';
                    return;
                }

                // Parse and validate schedule ID
                const parsedScheduleId = parseInt(scheduleId, 10);
                if (isNaN(parsedScheduleId) || parsedScheduleId <= 0) {
                    showMessage('Invalid schedule selected. Please select a valid time slot.', 'error');
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-calendar-check"></i> Submit Appointment Request';
                    return;
                }

                // Prepare form data - serviceRequired goes to ReasonForVisit
                const formData = {
                    ScheduleId: parsedScheduleId,
                    PatientId: patientId,
                    ReasonForVisit: serviceRequired, // This maps to ReasonForVisit in database
                    Symptoms: symptoms.trim() || "No symptoms provided" // Make optional with default
                };

                console.log('Form data to submit (mapped):', formData);
                console.log('ScheduleId parsed:', parsedScheduleId);
                console.log('ReasonForVisit value being sent:', formData.ReasonForVisit);

                // Get anti-forgery token with fallback
                const token = getAntiForgeryToken();

                // Use FormData instead of JSON to ensure proper binding
                const formDataToSend = new FormData();
                formDataToSend.append('ScheduleId', formData.ScheduleId.toString());
                formDataToSend.append('PatientId', formData.PatientId.toString());
                formDataToSend.append('ReasonForVisit', formData.ReasonForVisit);
                formDataToSend.append('Symptoms', formData.Symptoms);

                // Add anti-forgery token if available
                if (token) {
                    formDataToSend.append('__RequestVerificationToken', token);
                }

                // Debug: Log what's being sent
                console.log('FormData being sent:');
                for (let pair of formDataToSend.entries()) {
                    console.log(pair[0] + ': ' + pair[1]);
                }

                const response = await fetch('/Appointments/Create', {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: formDataToSend
                });

                // Check if response is OK
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                console.log('Appointment creation response:', result);

                if (result.success) {
                    const queueMessage = result.queueNumber ?
                        `Appointment booked successfully! Your queue number is ${result.queueNumber}.` :
                        'Appointment booked successfully!';

                    showMessage(queueMessage, 'success');

                    // Reset form
                    document.getElementById('appointmentForm').reset();

                    // Reset slots dropdown
                    document.getElementById('availableSlots').innerHTML = '<option value="">Select a date first</option>';
                    document.getElementById('availableSlots').disabled = true;

                    // Reload data
                    setTimeout(() => {
                        loadAvailableDates();
                        updateQueueStatus();
                    }, 1000);

                    // Clear any error messages
                    clearValidationErrors();
                } else {
                    let errorMessage = result.error || 'Failed to book appointment';
                    if (result.errors) {
                        // Display form errors
                        displayEnhancedFormErrors(result.errors);
                        errorMessage = 'Please fix the validation errors above.';
                    }
                    showMessage(errorMessage, 'error');
                }
            } catch (error) {
                console.error('Error booking appointment:', error);

                let userMessage = 'An error occurred while booking the appointment. ';

                if (error.message.includes('400')) {
                    userMessage += 'This might be due to a security token issue. Please refresh the page and try again.';
                } else if (error.message.includes('500')) {
                    userMessage += 'Server error. Please try again later.';
                } else {
                    userMessage += 'Please try again.';
                }

                showMessage(userMessage, 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<i class="fas fa-calendar-check"></i> Submit Appointment Request';
            }
        }

        // Setup date input with available dates restriction
        function setupDateInput() {
            const appointmentDate = document.getElementById('appointmentDate');
            const dateError = document.getElementById('dateError');

            // Add input event listener for real-time validation
            appointmentDate.addEventListener('input', function() {
                const selectedDate = this.value;
                validateSelectedDate(selectedDate);
            });

            // Add change event listener for additional validation
            appointmentDate.addEventListener('change', function() {
                const selectedDate = this.value;
                validateSelectedDate(selectedDate);
            });

            // Add a custom property to store available dates
            appointmentDate.availableDates = availableDates;
        }

        // Validate if the selected date is available
        function validateSelectedDate(selectedDate) {
            const dateError = document.getElementById('dateError');
            const availableSlotsSelect = document.getElementById('availableSlots');

            if (!selectedDate) {
                dateError.textContent = '';
                availableSlotsSelect.innerHTML = '<option value="">Select a date first</option>';
                availableSlotsSelect.disabled = true;
                return false;
            }

            if (!isDateAvailable(selectedDate)) {
                dateError.textContent = 'Selected date is not available for appointments. Please choose from available dates.';
                availableSlotsSelect.innerHTML = '<option value="">Selected date is not available</option>';
                availableSlotsSelect.disabled = true;
                return false;
            } else {
                dateError.textContent = '';
                return true;
            }
        }

        // Check if a date is available
        function isDateAvailable(dateString) {
            return availableDates.includes(dateString);
        }

                // Enhanced available dates loading with auto-selection
        async function loadAvailableDates() {
            try {
                console.log('Loading available dates...');
                const response = await fetch('/Appointments/GetAvailableDates');
                const result = await response.json();

                console.log('Available dates response:', result);

                if (result.success && result.data && result.data.length > 0) {
                    // Convert to ISO string format (YYYY-MM-DD)
                    availableDates = result.data.map(date => {
                        if (typeof date === 'string') {
                            return date.split('T')[0]; // Handle date strings
                        }
                        return new Date(date).toISOString().split('T')[0];
                    }).filter(date => date); // Remove null/undefined

                    console.log('Processed available dates:', availableDates);
                    updateAvailableDatesUI();

                    // Auto-select the first available date and load its slots
                    if (availableDates.length > 0) {
                        const appointmentDate = document.getElementById('appointmentDate');
                        const firstAvailableDate = availableDates[0];
                        appointmentDate.value = firstAvailableDate;

                        // Load slots for the first available date
                        setTimeout(() => {
                            loadAvailableSlots(firstAvailableDate);
                        }, 100);
                    }

                    return availableDates;
                } else {
                    console.warn('No available dates found in response');
                    availableDates = [];
                    updateAvailableDatesUI();
                    return [];
                }
            } catch (error) {
                console.error('Error loading available dates:', error);
                availableDates = [];
                updateAvailableDatesUI();
                return [];
            }
        }

        // Update the available dates UI
        function updateAvailableDatesUI() {
            const appointmentDate = document.getElementById('appointmentDate');

            // Remove existing hint if any
            const existingHint = appointmentDate.parentNode.querySelector('.available-dates-hint');
            if (existingHint) {
                existingHint.remove();
            }

            if (availableDates.length > 0) {
                // Create hint element
                const hint = document.createElement('div');
                hint.className = 'available-dates-hint';

                // Show next few available dates
                const nextDates = availableDates.slice(0, 5).map(date => {
                    const dateObj = new Date(date);
                    return dateObj.toLocaleDateString('en-US', {
                        weekday: 'short',
                        month: 'short',
                        day: 'numeric'
                    });
                });

                let hintText = `<strong>Available Dates:</strong> ${nextDates.join(', ')}`;
                if (availableDates.length > 5) {
                    hintText += ` and ${availableDates.length - 5} more`;
                }

                hint.innerHTML = hintText;
                appointmentDate.parentNode.appendChild(hint);
            } else {
                // Show message when no dates available
                const hint = document.createElement('div');
                hint.className = 'available-dates-hint no-dates';
                hint.innerHTML = '<strong>No available dates found. Please check back later.</strong>';
                appointmentDate.parentNode.appendChild(hint);
            }
        }

        // Enhanced date picker with custom validation (alternative approach)
        function enhanceDatePicker() {
            const appointmentDate = document.getElementById('appointmentDate');

            // Store original value for comparison
            let lastValidValue = '';

            appointmentDate.addEventListener('blur', function() {
                const selectedDate = this.value;
                if (selectedDate && !isDateAvailable(selectedDate)) {
                    // Reset to last valid value or clear
                    this.value = lastValidValue;
                    validateSelectedDate(this.value);
                } else if (selectedDate) {
                    lastValidValue = selectedDate;
                }
            });

            // Prevent invalid dates from being entered
            appointmentDate.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    const selectedDate = this.value;
                    if (selectedDate && !isDateAvailable(selectedDate)) {
                        e.preventDefault();
                        this.value = lastValidValue;
                        validateSelectedDate(this.value);
                    }
                }
            });
        }

                 // Load available slots for selected date - FIXED VERSION
        async function loadAvailableSlots(selectedDate) {
            const availableSlotsSelect = document.getElementById('availableSlots');
            const slotLoading = document.getElementById('slotLoading');
            const dateError = document.getElementById('dateError');

            if (!selectedDate) {
                availableSlotsSelect.innerHTML = '<option value="">Select a date first</option>';
                availableSlotsSelect.disabled = true;
                dateError.textContent = '';
                return;
            }

            // Validate date is available
            if (!isDateAvailable(selectedDate)) {
                availableSlotsSelect.innerHTML = '<option value="">Selected date is not available</option>';
                availableSlotsSelect.disabled = true;
                dateError.textContent = 'Selected date is not available for appointments.';
                return;
            }

            try {
                slotLoading.style.display = 'block';
                availableSlotsSelect.disabled = true;
                availableSlotsSelect.innerHTML = '<option value="">Loading available slots...</option>';
                dateError.textContent = '';

                console.log(`Fetching slots for: ${selectedDate}`);
                const response = await fetch(`/Appointments/GetAvailableSlots?date=${selectedDate}`);
                const result = await response.json();

                console.log('Slots API response:', result);

                if (result.success) {
                    if (result.data && result.data.length > 0) {
                        availableSlots = result.data;
                        availableSlotsSelect.innerHTML = '<option value="">Select a time slot</option>';

                        result.data.forEach(slot => {
                            const option = document.createElement('option');
                            // Handle both camelCase (from JSON serialization) and PascalCase
                            const scheduleId = slot.scheduleId || slot.ScheduleId;
                            option.value = scheduleId;

                            // Debug: Log the slot data to see property names
                            console.log('Slot data:', slot);
                            console.log('ScheduleId value:', scheduleId);

                            // Use the formatted times that are already provided
                            let displayText;

                            if (slot.displayText || slot.DisplayText) {
                                // Use DisplayText if available (handle both cases)
                                displayText = slot.displayText || slot.DisplayText;
                            } else if (slot.startTimeFormatted && slot.endTimeFormatted) {
                                // Use the pre-formatted times (camelCase from JSON)
                                displayText = `${slot.startTimeFormatted} - ${slot.endTimeFormatted}`;
                            } else if (slot.StartTimeFormatted && slot.EndTimeFormatted) {
                                // Use the pre-formatted times (PascalCase)
                                displayText = `${slot.StartTimeFormatted} - ${slot.EndTimeFormatted}`;
                            } else {
                                // Fallback: format the time strings ourselves
                                const startTime = formatTimeString(slot.startTime || slot.StartTime);
                                const endTime = formatTimeString(slot.endTime || slot.EndTime);
                                displayText = `${startTime} - ${endTime}`;
                            }

                            option.textContent = displayText;
                            option.dataset.slotInfo = JSON.stringify(slot);
                            availableSlotsSelect.appendChild(option);

                            console.log('Added slot option:', displayText, 'with ScheduleId:', scheduleId);
                        });

                        availableSlotsSelect.disabled = false;
                        showSlotCountInfo(result.data.length);
                        dateError.textContent = '';

                        console.log(`Successfully loaded ${result.data.length} slots`);
                    } else {
                        // No slots found for this date
                        availableSlotsSelect.innerHTML = '<option value="">No available time slots for this date</option>';
                        availableSlotsSelect.disabled = true;
                        showSlotCountInfo(0);
                        dateError.textContent = 'No available time slots found for the selected date.';
                    }
                } else {
                    // API returned error
                    availableSlotsSelect.innerHTML = '<option value="">Error loading slots</option>';
                    availableSlotsSelect.disabled = true;
                    dateError.textContent = result.error || 'Error loading available slots';
                }
            } catch (error) {
                console.error('Error loading available slots:', error);
                availableSlotsSelect.innerHTML = '<option value="">Error loading slots</option>';
                availableSlotsSelect.disabled = true;
                dateError.textContent = 'Network error loading available slots.';
                showSlotCountInfo(0);
            } finally {
                slotLoading.style.display = 'none';
            }
        }

        // Format time string from "09:00:00" to "9:00 AM"
        function formatTimeString(timeStr) {
            if (!timeStr) return 'N/A';

            console.log('Formatting time string:', timeStr);

            // Handle different time string formats
            if (typeof timeStr === 'string') {
                // Remove seconds if present
                const timeWithoutSeconds = timeStr.split(':').slice(0, 2).join(':');
                const [hours, minutes] = timeWithoutSeconds.split(':').map(Number);

                if (!isNaN(hours) && !isNaN(minutes)) {
                    const period = hours >= 12 ? 'PM' : 'AM';
                    const displayHours = hours % 12 || 12;
                    const displayMinutes = minutes.toString().padStart(2, '0');
                    return `${displayHours}:${displayMinutes} ${period}`;
                }
            }

            return 'N/A';
        }

        // Show information about available slots count
        function showSlotCountInfo(count) {
            const availableSlotsSelect = document.getElementById('availableSlots');

            // Remove existing count info
            const existingInfo = availableSlotsSelect.parentNode.querySelector('.slot-count-info');
            if (existingInfo) {
                existingInfo.remove();
            }

            if (count > 0) {
                const info = document.createElement('small');
                info.className = 'form-text text-muted slot-count-info';
                info.textContent = `${count} available slot(s) found`;
                availableSlotsSelect.parentNode.appendChild(info);
            }
        }


                 // Enhanced form validation - SYMPTOMS NOW OPTIONAL
        function validateEnhancedAppointmentForm() {
            let isValid = true;
            const dateError = document.getElementById('dateError');
            const slotError = document.getElementById('slotError');
            const serviceError = document.getElementById('serviceError');
            const symptomsError = document.getElementById('symptomsError');

            // Clear previous errors
            clearValidationErrors();

            const appointmentDate = document.getElementById('appointmentDate').value;
            const availableSlot = document.getElementById('availableSlots').value;
            const serviceRequired = document.getElementById('serviceRequired').value;
            const symptoms = document.getElementById('symptoms').value;

            // Date validation
            if (!appointmentDate) {
                dateError.textContent = 'Please select appointment date';
                isValid = false;
            } else if (!isDateAvailable(appointmentDate)) {
                dateError.textContent = 'Selected date is not available for appointments. Please choose from available dates.';
                isValid = false;
            }

            // Slot validation
            if (!availableSlot) {
                slotError.textContent = 'Please select an available time slot';
                isValid = false;
            }

            // Service validation
            if (!serviceRequired) {
                serviceError.textContent = 'Please select a service';
                isValid = false;
            }

            // Symptoms validation - NOW OPTIONAL
            // No validation required for symptoms field

            return isValid;
        }

        // Clear all validation errors
        function clearValidationErrors() {
            const errorElements = document.querySelectorAll('.validation-error');
            errorElements.forEach(element => {
                element.textContent = '';
            });
        }

        // Main DOM Ready handler - consolidate all initialization here
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM Content Loaded - Initializing all components...');
            
            // Initialize appointment booking
            initializeEnhancedAppointment();
            enhanceDatePicker();
            
            // Initialize real-time queue updates
            initializeQueueUpdates();
            
            // Initialize messaging
            initializeMessaging();
        });

                // Helper function to get current patient ID from server session
        let cachedStudentId = null; // Cache the student ID to avoid repeated API calls

        async function getCurrentPatientId() {
            // Return cached value if available
            if (cachedStudentId !== null) {
                console.log('Using cached student ID:', cachedStudentId);
                return cachedStudentId;
            }

            try {
                const response = await fetch('/Student/GetCurrentStudentId');
                const result = await response.json();

                if (result.success && result.studentId) {
                    cachedStudentId = result.studentId;
                    console.log('Retrieved student ID from session:', cachedStudentId);
                    return cachedStudentId;
                } else {
                    console.error('Failed to get student ID:', result.error);
                    throw new Error('You must be logged in as a student to book an appointment');
                }
            } catch (error) {
                console.error('Error fetching student ID:', error);
                throw new Error('Unable to verify login status. Please log in again.');
            }
        }

                // Display enhanced form errors - IMPROVED VERSION
        function displayEnhancedFormErrors(errors) {
            console.log('Form errors received:', errors);

            // Clear previous errors first
            clearValidationErrors();

            for (const [field, messages] of Object.entries(errors)) {
                if (messages && messages.length > 0) {
                    let errorElement;

                    // Map C# model property names to HTML element IDs
                    switch(field) {
                        case 'PatientId':
                            errorElement = document.getElementById('patientError');
                            break;
                        case 'ScheduleId':
                            errorElement = document.getElementById('slotError');
                            break;
                        case 'ReasonForVisit':
                            errorElement = document.getElementById('serviceError');
                            break;
                        case 'Symptoms':
                            errorElement = document.getElementById('symptomsError');
                            break;
                        default:
                            errorElement = document.getElementById(field + 'Error');
                    }

                    if (errorElement && messages.length > 0) {
                        errorElement.textContent = messages[0];
                    }
                }
            }
        }

                // Enhanced message display function
        function showMessage(message, type) {
            const messageContainer = document.getElementById('appointmentMessage');
            const alertClass = type === 'success' ? 'alert-success' :
                              type === 'error' ? 'alert-error' : 'alert-info';

            messageContainer.innerHTML = `
                <div class="alert ${alertClass}">
                    <div class="message-content">${message}</div>
                    <button class="close-btn" onclick="this.parentElement.remove()">&times;</button>
                </div>
            `;

            // Auto-hide success messages after 5 seconds
            if (type === 'success') {
                setTimeout(() => {
                    const alert = messageContainer.querySelector('.alert');
                    if (alert) {
                        alert.remove();
                    }
                }, 5000);
            }
        }

                // Get anti-forgery token with multiple fallback methods
        function getAntiForgeryToken() {
            // Method 1: Look for input with name __RequestVerificationToken
            let token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

            // Method 2: Look for hidden input with anti-forgery token
            if (!token) {
                token = document.querySelector('input[type="hidden"][name="__RequestVerificationToken"]')?.value;
            }

            // Method 3: Look for any element with the token
            if (!token) {
                const tokenElement = document.querySelector('[name="__RequestVerificationToken"], [data-token]');
                token = tokenElement?.value || tokenElement?.dataset?.token;
            }

            // Method 4: Check if token is in a meta tag
            if (!token) {
                const metaToken = document.querySelector('meta[name="__RequestVerificationToken"]');
                token = metaToken?.getAttribute('content');
            }

            console.log('Anti-forgery token found:', token ? 'Yes' : 'No');
            return token;
        }

                // Add this debug function and call it
        async function debugSlotData() {
            const testDate = new Date().toISOString().split('T')[0]; // Today's date
            console.log('=== DEBUGGING SLOT DATA ===');

            try {
                const response = await fetch(`/Appointments/GetAvailableSlots?date=${testDate}`);
                const result = await response.json();
                console.log('Full API response:', JSON.stringify(result, null, 2));

                if (result.success && result.data && result.data.length > 0) {
                    console.log('First slot details:', result.data[0]);
                    console.log('StartTime type:', typeof result.data[0].StartTime);
                    console.log('StartTime value:', result.data[0].StartTime);
                    console.log('EndTime value:', result.data[0].EndTime);
                    console.log('StartTimeFormatted value:', result.data[0].StartTimeFormatted);
                    console.log('EndTimeFormatted value:', result.data[0].EndTimeFormatted);
                    console.log('DisplayText value:', result.data[0].DisplayText);
                } else {
                    console.log('No data returned from API');
                }
            } catch (error) {
                console.error('Debug error:', error);
            }
        }

                // Debug: Check what's being sent to the server
        async function debugFormSubmission() {
            const scheduleId = document.getElementById('availableSlots').value;
            const serviceRequired = document.getElementById('serviceRequired').value;
            const symptoms = document.getElementById('symptoms').value;

            console.log('=== FORM DATA DEBUG ===');
            console.log('scheduleId:', scheduleId, 'type:', typeof scheduleId);
            console.log('serviceRequired:', serviceRequired, 'type:', typeof serviceRequired);
            console.log('symptoms:', symptoms, 'type:', typeof symptoms);

            const formData = {
                ScheduleId: parseInt(scheduleId),
                PatientId: getCurrentPatientId(),
                ReasonForVisit: serviceRequired,
                Symptoms: symptoms.trim() || "No symptoms provided"
            };

            console.log('Final formData to be sent:', formData);
            console.log('ReasonForVisit value:', formData.ReasonForVisit);
            console.log('Is ReasonForVisit empty?', !formData.ReasonForVisit);
        }

        // Check all available dates and their slots
        async function debugAllAvailableSlots() {
            console.log('=== CHECKING ALL AVAILABLE SLOTS ===');

            try {
                // First, get all available dates
                const datesResponse = await fetch('/Appointments/GetAvailableDates');
                const datesResult = await datesResponse.json();

                console.log('Available dates:', datesResult.data);

                if (datesResult.success && datesResult.data && datesResult.data.length > 0) {
                    // Check slots for each available date
                    for (const date of datesResult.data.slice(0, 3)) { // Check first 3 dates
                        const dateStr = typeof date === 'string' ? date : new Date(date).toISOString().split('T')[0];
                        console.log(`\nChecking slots for date: ${dateStr}`);

                        const slotsResponse = await fetch(`/Appointments/GetAvailableSlots?date=${dateStr}`);
                        const slotsResult = await slotsResponse.json();

                        console.log(`Slots for ${dateStr}:`, slotsResult.data);

                        if (slotsResult.success && slotsResult.data && slotsResult.data.length > 0) {
                            console.log(`Found ${slotsResult.data.length} slots for ${dateStr}`);
                            console.log('First slot details:', slotsResult.data[0]);
                            break; // Stop after finding the first date with slots
                        }
                    }
                } else {
                    console.log('No available dates found at all!');
                }
            } catch (error) {
                console.error('Debug error:', error);
            }
        }

        // Run this in console
        // debugAllAvailableSlots()

        // ===== REAL-TIME QUEUE FUNCTIONALITY =====
        let queueUpdateInterval = null;
        const QUEUE_UPDATE_INTERVAL = 5000; // Update every 5 seconds for more real-time feeling

        // Initialize queue updates - will be called when DOM is ready
        function initializeQueueUpdates() {
            console.log('Initializing queue updates...');
            
            // Initial queue load
            updateQueueStatus();

            // Start auto-refresh
            startQueueAutoRefresh();

            // Manual refresh button
            const refreshBtn = document.getElementById('refreshQueue');
            if (refreshBtn) {
                refreshBtn.addEventListener('click', function() {
                    const icon = this.querySelector('i');
                    if (icon) {
                        icon.classList.add('fa-spin');
                        updateQueueStatus().finally(() => {
                            icon.classList.remove('fa-spin');
                        });
                    } else {
                        updateQueueStatus();
                    }
                });
            }
        }

        // Update queue status
        async function updateQueueStatus() {
            const statusIndicator = document.getElementById('queueStatusIndicator');
            
            try {
                // Add updating class for pulse animation
                if (statusIndicator) {
                    statusIndicator.classList.add('updating');
                }
                
                // Get current student ID
                let studentId = null;
                try {
                    studentId = await getCurrentPatientId();
                } catch (error) {
                    console.log('No student logged in, showing general queue status');
                }

                // Fetch queue status
                const url = studentId
                    ? `/Appointments/GetQueueStatus?studentId=${studentId}`
                    : '/Appointments/GetQueueStatus';

                const response = await fetch(url);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();

                if (result.success && result.data) {
                    displayQueueStatus(result.data);
                    console.log('Queue status updated successfully at:', new Date().toLocaleTimeString());
                } else {
                    console.error('Failed to fetch queue status:', result.error);
                    // Display error in UI
                    displayQueueError('Unable to load queue status');
                }
            } catch (error) {
                console.error('Error updating queue status:', error);
                // Don't show error in UI for network issues - just log it
                // This prevents annoying error messages during auto-refresh
            } finally {
                // Remove updating class after a short delay
                if (statusIndicator) {
                    setTimeout(() => {
                        statusIndicator.classList.remove('updating');
                    }, 1000);
                }
            }
        }
        
        // Display error in queue UI
        function displayQueueError(message) {
            const nowServingElement = document.getElementById('nowServing');
            const waitingCountElement = document.getElementById('waitingCount');
            const queueMessageElement = document.getElementById('queueMessage');
            const userQueueNumberElement = document.getElementById('userQueueNumber');
            
            nowServingElement.textContent = 'Error loading data';
            nowServingElement.style.color = '#dc3545';
            waitingCountElement.textContent = '-';
            queueMessageElement.innerHTML = '<p style="color: #dc3545;"><i class="fas fa-exclamation-triangle"></i> ' + message + '</p>';
            userQueueNumberElement.innerHTML = '<span style="color: #6c757d;">-</span>';
        }

        // Display queue status in the UI
        function displayQueueStatus(data) {
            // Update "Now Serving"
            const nowServingElement = document.getElementById('nowServing');
            if (data.nowServing) {
                nowServingElement.innerHTML = '<strong>Queue #' + data.nowServing.queueNumber + '</strong><br>' +
                    '<small>' + (data.nowServing.service || 'General Consultation') + '</small>';
                nowServingElement.style.color = '#28a745';
                nowServingElement.style.fontWeight = 'bold';
            } else {
                nowServingElement.textContent = 'No consultation active';
                nowServingElement.style.color = '#6c757d';
                nowServingElement.style.fontWeight = 'normal';
            }

            // Update "Waiting Count"
            const waitingCountElement = document.getElementById('waitingCount');
            waitingCountElement.textContent = data.waitingCount + ' patient(s)';
            waitingCountElement.style.color = data.waitingCount > 0 ? '#007bff' : '#6c757d';

            // Update user's queue information
            const queueMessageElement = document.getElementById('queueMessage');
            const userQueueNumberElement = document.getElementById('userQueueNumber');

            if (data.userQueueNumber) {
                // User has an appointment today
                userQueueNumberElement.innerHTML = '<span style="font-size: 2rem; font-weight: bold; color: #007bff;">' +
                    '#' + data.userQueueNumber + '</span>';

                // Show status message based on queue status
                let statusMessage = '';
                let statusColor = '';
                let statusIcon = '';

                switch (data.userQueueStatus) {
                    case 'Waiting':
                        statusIcon = '<i class="fas fa-clock"></i>';
                        statusColor = '#ffc107';
                        if (data.userPosition) {
                            statusMessage = 'You are #' + data.userPosition + ' in line. Please wait for your turn.';
                        } else {
                            statusMessage = 'You are in the queue. Please wait for your turn.';
                        }
                        break;
                    case 'Being Served':
                        statusIcon = '<i class="fas fa-user-md"></i>';
                        statusColor = '#28a745';
                        statusMessage = 'You are currently being served. Please proceed to the clinic.';
                        break;
                    case 'Pending':
                        statusIcon = '<i class="fas fa-hourglass-half"></i>';
                        statusColor = '#6c757d';
                        statusMessage = 'Your appointment is pending confirmation.';
                        break;
                    default:
                        statusIcon = '<i class="fas fa-info-circle"></i>';
                        statusColor = '#007bff';
                        statusMessage = 'You have an appointment today.';
                }

                queueMessageElement.innerHTML = '<div style="padding: 1rem; background-color: ' + statusColor + '20; border-left: 4px solid ' + statusColor + '; border-radius: 0.375rem;">' +
                    statusIcon + ' <strong style="color: ' + statusColor + ';">' + statusMessage + '</strong></div>';
            } else {
                // No appointment today
                userQueueNumberElement.innerHTML = '<span style="color: #6c757d;">-</span>';
                queueMessageElement.innerHTML = '<p style="color: #6c757d; font-style: italic;">' +
                    '<i class="fas fa-info-circle"></i> You have no active appointment in the queue today.</p>';
            }

            // Update last updated time
            const lastUpdated = new Date(data.lastUpdated);
            const lastUpdatedElement = document.getElementById('queueLastUpdated');
            const statusIndicator = document.getElementById('queueStatusIndicator');
            
            if (lastUpdatedElement) {
                lastUpdatedElement.textContent = `Updated: ${lastUpdated.toLocaleTimeString()}`;
            }
            
            // Pulse the status indicator to show it's updating
            if (statusIndicator) {
                statusIndicator.style.color = '#ffc107'; // Yellow during update
                setTimeout(() => {
                    statusIndicator.style.color = '#28a745'; // Green when done
                }, 500);
            }
            
            console.log('Queue updated at:', lastUpdated.toLocaleTimeString());
        }

        // Start auto-refresh
        function startQueueAutoRefresh() {
            // Clear any existing interval
            if (queueUpdateInterval) {
                clearInterval(queueUpdateInterval);
                queueUpdateInterval = null;
            }

            // Set up new interval
            queueUpdateInterval = setInterval(function() {
                console.log('Auto-refreshing queue status...');
                updateQueueStatus();
            }, QUEUE_UPDATE_INTERVAL);

            console.log(`Queue auto-refresh started (every ${QUEUE_UPDATE_INTERVAL / 1000} seconds)`);
        }

        // Stop auto-refresh (useful when user navigates away)
        function stopQueueAutoRefresh() {
            if (queueUpdateInterval) {
                clearInterval(queueUpdateInterval);
                queueUpdateInterval = null;
                console.log('Queue auto-refresh stopped');
            }
        }

        // Stop auto-refresh when user leaves the page
        window.addEventListener('beforeunload', stopQueueAutoRefresh);
        
        // Also restart auto-refresh when page becomes visible again (tab switching)
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden) {
                console.log('Page became visible, updating queue...');
                updateQueueStatus();
                // Restart auto-refresh to ensure it's running
                if (!queueUpdateInterval) {
                    startQueueAutoRefresh();
                }
            }
        });

        // ===== MESSAGING FUNCTIONALITY =====
        let messagesInterval = null;

        // Initialize messaging
        function initializeMessaging() {
            console.log('Initializing messaging...');
            
            // Load messages on page load
            loadMessages();

            // Auto-refresh messages every 10 seconds
            startMessagingAutoRefresh();

            // Send message button click
            const sendButton = document.getElementById('sendMessage');
            if (sendButton) {
                sendButton.addEventListener('click', sendMessageToStaff);
            }

            // Send message on Enter key
            const messageInput = document.getElementById('messageInput');
            if (messageInput) {
                messageInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        sendMessageToStaff();
                    }
                });
            }
        }

        // Load messages from server
        async function loadMessages() {
            try {
                const response = await fetch('/Home/GetMessages');
                const result = await response.json();

                if (result.success && result.data) {
                    displayMessages(result.data);
                } else {
                    console.error('Failed to load messages:', result.error);
                }
            } catch (error) {
                console.error('Error loading messages:', error);
            }
        }

        // Display messages in the chat
        function displayMessages(messages) {
            const chatMessages = document.getElementById('chatMessages');
            
            if (messages.length === 0) {
                chatMessages.innerHTML = `
                    <div class="message received">
                        <div class="message-content">
                            Welcome to QuickClinique! How can we assist you today?
                        </div>
                        <div class="message-time">Just now</div>
                    </div>
                `;
                return;
            }

            chatMessages.innerHTML = messages.map(msg => {
                const messageClass = msg.isSent ? 'sent' : 'received';
                const messageTime = formatMessageTime(msg.createdAt);
                
                return `
                    <div class="message ${messageClass}">
                        <div class="message-content">${escapeHtml(msg.message)}</div>
                        <div class="message-time">${messageTime}</div>
                    </div>
                `;
            }).join('');

            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Send message to clinic staff
        async function sendMessageToStaff() {
            const messageInput = document.getElementById('messageInput');
            const messageText = messageInput.value.trim();

            if (!messageText) {
                return;
            }

            // Disable send button
            const sendButton = document.getElementById('sendMessage');
            sendButton.disabled = true;
            sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

            try {
                const response = await fetch('/Home/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ message: messageText })
                });

                const result = await response.json();

                if (result.success) {
                    // Clear input
                    messageInput.value = '';

                    // Reload messages
                    await loadMessages();
                } else {
                    alert('Failed to send message: ' + (result.error || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error sending message:', error);
                alert('Error sending message. Please try again.');
            } finally {
                sendButton.disabled = false;
                sendButton.innerHTML = '<i class="fas fa-paper-plane"></i>';
            }
        }

        // Format message timestamp
        function formatMessageTime(timestamp) {
            const date = new Date(timestamp);
            const now = new Date();
            const diffMs = now - date;
            const diffMins = Math.floor(diffMs / 60000);
            const diffHours = Math.floor(diffMs / 3600000);
            const diffDays = Math.floor(diffMs / 86400000);

            if (diffMins < 1) {
                return 'Just now';
            } else if (diffMins < 60) {
                return `${diffMins} min ago`;
            } else if (diffHours < 24) {
                return `${diffHours} hr ago`;
            } else if (diffDays < 7) {
                return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
            } else {
                return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
            }
        }

        // Escape HTML to prevent XSS
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Start auto-refresh for messages
        function startMessagingAutoRefresh() {
            if (messagesInterval) {
                clearInterval(messagesInterval);
            }

            messagesInterval = setInterval(function() {
                loadMessages();
            }, 10000); // Refresh every 10 seconds
        }

        // Stop messaging auto-refresh
        function stopMessagingAutoRefresh() {
            if (messagesInterval) {
                clearInterval(messagesInterval);
                messagesInterval = null;
            }
        }

    </script>

    <style>
        .available-dates-hint {
            font-size: 0.8rem;
            margin-top: 0.5rem;
            padding: 0.75rem;
            background-color: #e8f5e8;
            border-radius: 0.375rem;
            border-left: 4px solid #28a745;
            color: #155724;
        }

            .available-dates-hint.no-dates {
                background-color: #f8d7da;
                border-left-color: #dc3545;
                color: #721c24;
            }

        .form-text.text-muted {
            display: block;
            margin-top: 0.25rem;
        }


        textarea#symptoms {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ced4da;
            border-radius: 0.375rem;
            resize: vertical;
        }

        .slot-info {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 0.25rem;
        }

        .slot-count-info {
            display: block;
            margin-top: 0.5rem;
            font-weight: 500;
            color: #28a745;
        }

        .validation-error {
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0.25rem;
            display: block;
        }

        .message-container {
            margin-top: 1rem;
        }

        .alert {
            padding: 0.75rem 1rem;
            margin-bottom: 1rem;
            border: 1px solid transparent;
            border-radius: 0.375rem;
            display: flex;
            justify-content: between;
            align-items: center;
        }

        .alert-success {
            color: #0f5132;
            background-color: #d1e7dd;
            border-color: #badbcc;
        }

        .alert-error {
            color: #721c24;
            background-color: #f8d7da;
            border-color: #f5c6cb;
        }

        .alert-info {
            color: #055160;
            background-color: #cff4fc;
            border-color: #b6effb;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.25rem;
            cursor: pointer;
            margin-left: auto;
        }

        .refresh-btn {
            background: none;
            border: none;
            color: #6c757d;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 0.25rem;
            transition: color 0.2s;
        }

            .refresh-btn:hover {
                color: #495057;
            }


        .message.sent .message-content {
            background-color: #007bff;
            color: white;
        }

        .message.received .message-content {
            background-color: #e9ecef;
            color: #495057;
        }

        /* Style for valid/invalid dates */
        input:valid {
            border-color: #28a745;
        }

        input:invalid {
            border-color: #dc3545;
        }

        /* Custom date picker styling */
        input[type="date"] {
            position: relative;
        }

        /* Loading states */
        .loading-message {
            color: #6c757d;
            font-size: 0.875em;
            margin-top: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .validation-error {
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0.25rem;
            display: block;
        }

        /* Success state for valid date selection */
        .date-valid {
            border-color: #28a745;
            background-color: #f8fff9;
        }

        .date-invalid {
            border-color: #dc3545;
            background-color: #fff5f5;
        }

        /* Enhanced error styling */
        .validation-error {
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0.25rem;
            display: block;
            font-weight: 500;
        }

        .alert {
            padding: 0.75rem 1rem;
            margin-bottom: 1rem;
            border: 1px solid transparent;
            border-radius: 0.375rem;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

        .alert-success {
            color: #0f5132;
            background-color: #d1e7dd;
            border-color: #badbcc;
        }

        .alert-error {
            color: #721c24;
            background-color: #f8d7da;
            border-color: #f5c6cb;
        }

        .alert-info {
            color: #055160;
            background-color: #cff4fc;
            border-color: #b6effb;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.25rem;
            cursor: pointer;
            margin-left: 1rem;
            color: inherit;
            opacity: 0.7;
        }

            .close-btn:hover {
                opacity: 1;
            }

        .message-content {
            flex: 1;
        }

        /* Form field error states */
        .form-group.has-error input,
        .form-group.has-error select,
        .form-group.has-error textarea {
            border-color: #dc3545;
            background-color: #fff5f5;
        }

        .form-group.has-error .validation-error {
            display: block;
        }

        /* Queue status indicator pulse animation */
        @@keyframes pulse {
            0% {
                transform: scale(1);
                opacity: 1;
            }
            50% {
                transform: scale(1.2);
                opacity: 0.7;
            }
            100% {
                transform: scale(1);
                opacity: 1;
            }
        }

        #queueStatusIndicator {
            transition: color 0.3s ease;
        }

        #queueStatusIndicator.updating {
            animation: pulse 1s ease-in-out infinite;
        }

        .queue-last-updated {
            border-top: 1px solid #e9ecef;
            padding-top: 10px !important;
        }
    </style>
}