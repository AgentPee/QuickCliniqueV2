@{
    ViewData["Title"] = "Home Page";
    Layout = "_Layout";
}

@section Styles {
    <link rel="stylesheet" href="~/css/dashboard.css" asp-append-version="true" />
    <style>
        .available-dates-hint {
            font-size: 0.8rem;
            margin-top: 0.5rem;
            padding: 0.75rem;
            background-color: #e8f5e8;
            border-radius: 0.375rem;
            border-left: 4px solid #28a745;
            color: #155724;
        }

            .available-dates-hint.no-dates {
                background-color: #f8d7da;
                border-left-color: #dc3545;
                color: #721c24;
            }

        .form-text.text-muted {
            display: block;
            margin-top: 0.25rem;
        }

        .history-item {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            padding: 1rem;
            border: 1px solid #e9ecef;
            border-radius: 0.375rem;
            margin-bottom: 0.75rem;
            background: white;
            transition: background-color 0.2s;
        }

            .history-item:hover {
                background-color: #f8f9fa;
            }

            .history-item.pending {
                border-left: 4px solid #ffc107;
            }

            .history-item.confirmed {
                border-left: 4px solid #28a745;
            }

            .history-item.cancelled {
                border-left: 4px solid #dc3545;
            }

        .history-main {
            flex: 1;
        }

        .history-meta {
            text-align: right;
            min-width: 120px;
        }

        .history-symptoms {
            margin-top: 0.5rem;
            color: #6c757d;
            font-size: 0.875rem;
        }

        .history-date,
        .history-time,
        .history-service,
        .history-symptoms {
            margin-bottom: 0.25rem;
        }

        .history-status {
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.875rem;
            font-weight: 500;
        }

            .history-status.pending {
                background-color: #fff3cd;
                color: #856404;
            }

            .history-status.confirmed {
                background-color: #d1e7dd;
                color: #0f5132;
            }

            .history-status.cancelled {
                background-color: #f8d7da;
                color: #721c24;
            }

        textarea#symptoms {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ced4da;
            border-radius: 0.375rem;
            resize: vertical;
        }

        .slot-info {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 0.25rem;
        }

        .slot-count-info {
            display: block;
            margin-top: 0.5rem;
            font-weight: 500;
            color: #28a745;
        }

        .validation-error {
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0.25rem;
            display: block;
            font-weight: 500;
        }

        .message-container {
            margin-top: 1rem;
        }

        .alert {
            padding: 0.75rem 1rem;
            margin-bottom: 1rem;
            border: 1px solid transparent;
            border-radius: 0.375rem;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

        .alert-success {
            color: #0f5132;
            background-color: #d1e7dd;
            border-color: #badbcc;
        }

        .alert-error {
            color: #721c24;
            background-color: #f8d7da;
            border-color: #f5c6cb;
        }

        .alert-info {
            color: #055160;
            background-color: #cff4fc;
            border-color: #b6effb;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.25rem;
            cursor: pointer;
            margin-left: 1rem;
            color: inherit;
            opacity: 0.7;
        }

            .close-btn:hover {
                opacity: 1;
            }

        .message-content {
            flex: 1;
        }

        .refresh-btn {
            background: none;
            border: none;
            color: #6c757d;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 0.25rem;
            transition: color 0.2s;
        }

            .refresh-btn:hover {
                color: #495057;
            }

        .cancel-btn {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 0.375rem 0.75rem;
            border-radius: 0.25rem;
            cursor: pointer;
            font-size: 0.875rem;
            transition: background-color 0.2s;
        }

            .cancel-btn:hover {
                background-color: #c82333;
            }

        .message.sent .message-content {
            background-color: #007bff;
            color: white;
        }

        .message.received .message-content {
            background-color: #e9ecef;
            color: #495057;
        }

        input:valid {
            border-color: #28a745;
        }

        input:invalid {
            border-color: #dc3545;
        }

        input[type="date"] {
            position: relative;
        }

        .loading-message {
            color: #6c757d;
            font-size: 0.875em;
            margin-top: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .date-valid {
            border-color: #28a745;
            background-color: #f8fff9;
        }

        .date-invalid {
            border-color: #dc3545;
            background-color: #fff5f5;
        }

        .form-group.has-error input,
        .form-group.has-error select,
        .form-group.has-error textarea {
            border-color: #dc3545;
            background-color: #fff5f5;
        }

        .form-group.has-error .validation-error {
            display: block;
        }

        /* Dental Schedule - 5 cards in one row */
        .schedule-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .schedule-card {
            background: white;
            padding: 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            text-align: center;
            transition: transform 0.2s, box-shadow 0.2s;
        }

            .schedule-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            }

        .schedule-icon {
            font-size: 2.5rem;
            color: #4ECDC4;
            margin-bottom: 1rem;
        }

        .schedule-day {
            font-size: 1.25rem;
            font-weight: 600;
            color: #4ECDC4;
            margin-bottom: 0.5rem;
        }

        .schedule-service {
            font-size: 1.1rem;
            font-weight: 500;
            color: #333;
            margin-bottom: 0.75rem;
        }

        .schedule-desc {
            font-size: 0.9rem;
            color: #666;
            line-height: 1.5;
        }
    </style>
}

<div class="main-content">
    <!-- Hero Section -->
    <section class="hero">
        <h1>University of Cebu Medical-Dental Clinic</h1>
        <p>Providing quality healthcare services to the UC community with compassion and excellence</p>
        <div class="hero-buttons">
            <a href="#dashboard" class="btn btn-primary"><i class="fas fa-calendar-check"></i> Book Appointment</a>
            <a href="#dental-schedule" class="btn btn-outline"><i class="fas fa-tooth"></i> Dental Schedule</a>
        </div>
    </section>

    <!-- Dashboard Section -->
    <section class="dashboard-section" id="dashboard">
        <h2 class="dashboard-header"><i class="fas fa-chart-line"></i> STUDENT DASHBOARD</h2>

        <div class="dashboard-grid">
            <!-- Appointment Booking -->
            <div class="appointment-card">
                <h3>Book New Appointment</h3>
                <form id="appointmentForm">
                    @Html.AntiForgeryToken()
                    <span class="validation-error" id="patientError"></span>
                    <div class="form-group">
                        <label for="appointmentDate">Select Date</label>
                        <input type="date" id="appointmentDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" required>
                        <small class="form-text text-muted">Only dates with available slots are selectable</small>
                        <span class="validation-error" id="dateError"></span>
                    </div>

                    <div class="form-group">
                        <label for="availableSlots">Available Time Slots</label>
                        <select id="availableSlots" required disabled>
                            <option value="">Select a date first</option>
                        </select>
                        <span class="validation-error" id="slotError"></span>
                        <div id="slotLoading" class="loading-message" style="display: none;">
                            <i class="fas fa-spinner fa-spin"></i> Loading available slots...
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="serviceRequired">Service Required</label>
                        <select id="serviceRequired" required>
                            <option value="">Select a Service</option>
                            <option value="medical-checkup">General Medical Checkup</option>
                            <option value="dental-checkup">Dental Checkup</option>
                            <option value="dental-cleaning">Dental Cleaning/Prophylaxis</option>
                            <option value="dental-pasta">Dental Pasta (Fillings)</option>
                            <option value="dental-extraction">Tooth Extraction</option>
                            <option value="consultation">Medical Consultation</option>
                            <option value="bp-monitoring">Blood Pressure Monitoring</option>
                            <option value="vaccination">Vaccination</option>
                            <option value="emergency">Emergency Care</option>
                        </select>
                        <span class="validation-error" id="serviceError"></span>
                    </div>

                    <div class="form-group">
                        <label for="symptoms">Symptoms/Concerns <small class="text-muted">(Optional)</small></label>
                        <textarea id="symptoms" placeholder="Describe your symptoms or concerns in detail (optional)..." rows="3"></textarea>
                        <span class="validation-error" id="symptomsError"></span>
                    </div>

                    <button type="submit" class="submit-appointment-btn" id="submitAppointment">
                        <i class="fas fa-calendar-check"></i> Submit Appointment Request
                    </button>
                </form>
                <div id="appointmentMessage" class="message-container"></div>
            </div>

            <!-- Real-Time Queue -->
            <div class="queue-card">
                <div class="queue-header">
                    <i class="fas fa-clock"></i> Real-Time Queue
                    <button class="refresh-btn" id="refreshQueue"><i class="fas fa-sync-alt"></i></button>
                </div>
                <div class="queue-info">
                    <h4>Now Serving:</h4>
                    <p id="nowServing">N/A (No consultation active)</p>
                </div>
                <div class="queue-info">
                    <h4>Waiting in line:</h4>
                    <p id="waitingCount">0 patient(s)</p>
                </div>
                <div class="queue-message" id="queueMessage">
                    <p>You have no active appointment in the queue.</p>
                </div>
                <div class="queue-info" style="margin-top: 15px;">
                    <h4>Your Queue Number:</h4>
                    <p id="userQueueNumber">-</p>
                </div>
            </div>
        </div>

        <!-- Appointment History -->
        <div class="history-section">
            <div class="history-header">
                <i class="fas fa-history"></i> Appointment History
                <button class="refresh-btn" id="refreshHistory"><i class="fas fa-sync-alt"></i></button>
            </div>
            <div class="history-list" id="historyList">
                <div class="no-records">No records found.</div>
            </div>
        </div>
    </section>

    <!-- Dental Schedule Section -->
    <section class="section" id="dental-schedule">
        <div class="section-header">
            <h2>Dental Services Schedule</h2>
            <p>Plan your visit according to our specialized dental service days</p>
        </div>
        <div class="dental-schedule-section">
            <div class="schedule-grid">
                <div class="schedule-card">
                    <div class="schedule-icon">
                        <i class="fas fa-spa"></i>
                    </div>
                    <div class="schedule-day">Monday</div>
                    <div class="schedule-service">Cleaning Only</div>
                    <div class="schedule-desc">
                        Professional dental cleaning and prophylaxis services available all day.
                    </div>
                </div>

                <div class="schedule-card">
                    <div class="schedule-icon">
                        <i class="fas fa-fill-drip"></i>
                    </div>
                    <div class="schedule-day">Tuesday</div>
                    <div class="schedule-service">Pasta (Fillings)</div>
                    <div class="schedule-desc">
                        Dental fillings and restorative procedures available throughout the day.
                    </div>
                </div>

                <div class="schedule-card">
                    <div class="schedule-icon">
                        <i class="fas fa-teeth"></i>
                    </div>
                    <div class="schedule-day">Wednesday</div>
                    <div class="schedule-service">Extraction</div>
                    <div class="schedule-desc">
                        Tooth extraction services available from morning to afternoon.
                    </div>
                </div>

                <div class="schedule-card">
                    <div class="schedule-icon">
                        <i class="fas fa-fill-drip"></i>
                    </div>
                    <div class="schedule-day">Thursday</div>
                    <div class="schedule-service">Pasta (Fillings)</div>
                    <div class="schedule-desc">
                        Dental fillings and restorative procedures available throughout the day.
                    </div>
                </div>

                <div class="schedule-card">
                    <div class="schedule-icon">
                        <i class="fas fa-teeth"></i>
                    </div>
                    <div class="schedule-day">Friday</div>
                    <div class="schedule-service">Extraction</div>
                    <div class="schedule-desc">
                        Tooth extraction services available from morning to afternoon.
                    </div>
                </div>
            </div>

            <div style="margin-top: 30px; padding: 20px; background: #e8f5e9; border-radius: 8px; border-left: 4px solid #4CAF50;">
                <h4 style="color: #2e7d32; margin-bottom: 10px;"><i class="fas fa-info-circle"></i> Important Note:</h4>
                <p style="color: #555; margin: 0;">
                    Emergency dental services are available every day during clinic hours.
                    Please contact the clinic directly for urgent dental concerns.
                </p>
            </div>
        </div>
    </section>

    <!-- Messaging Section -->
    <section class="messaging-section" id="messaging">
        <div class="messaging-header">
            <i class="fas fa-comments"></i> Clinic Communications
        </div>
        <div class="messaging-container">
            <div class="chat-header">
                <i class="fas fa-user-md"></i> Clinic Staff
            </div>
            <div class="chat-messages" id="chatMessages">
                <div class="message received">
                    <div class="message-content">
                        Welcome to QuickClinique! How can we assist you today?
                    </div>
                    <div class="message-time">09:00 AM</div>
                </div>
            </div>
            <div class="chat-input">
                <input type="text" id="messageInput" placeholder="Type your message...">
                <button class="send-btn" id="sendMessage">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </section>
    <div>
        <div>

        </div>
    </div>

    <!-- Mission & Vision Section -->
    <section class="section" id="mission">
        <div class="section-header">
            <h2>Our Mission & Vision</h2>
            <p>Guiding principles that drive our healthcare services</p>
        </div>
        <div class="mission-vision">
            <div class="vision-card">
                <h3><i class="fas fa-eye"></i> VISION</h3>
                <p>"As a Health Care Provider, the University of Cebu – Main goal is to render efficient Medical and Dental Services to the UC Community as a whole, and to promote good health and well-being of students that will highly contribute to their success."</p>
            </div>
            <div class="mission-card">
                <h3><i class="fas fa-bullseye"></i> MISSION</h3>
                <p>"Diverse implements, effective and accessible antidote for any malady and the health teaching that will be bestowed/ inculcated by the Clinicians to the minds of every individual who will be going to the Clinic are what the endeavor uses and does to ensure that the wellness of the health among UC populace is at hand."</p>
            </div>
        </div>
        <div class="staff-section">
            <h3 style="text-align: center; color: #4ECDC4; margin-bottom: 20px;">MEDICAL- DENTAL CLINIC</h3>
            <p style="text-align: center; font-style: italic; color: #666; margin-bottom: 30px;">"The UC Medical- Dental Clinic aims to promote good health and total well- being of the students, the teachers and the employees through prevention, diagnosis, treatment of disease, and education."</p>
        </div>
    </section>

    <!-- Staff Section -->
    <section class="section" id="staff">
        <div class="section-header">
            <h2>Our Medical & Dental Staff</h2>
            <p>Meet our dedicated healthcare professionals</p>
        </div>
        <div class="staff-section">
            <div class="staff-category">
                <h3>MEDICAL STAFF</h3>
                <div class="staff-grid">
                    <div class="staff-card">
                        <h4>Dr. Carolyn Go- Uang</h4>
                        <p>Medical Doctor</p>
                        <div class="staff-schedule">Schedule: 8:00 AM – 12:00 NN</div>
                    </div>
                    <div class="staff-card">
                        <h4>Dr. Jewel Ann Marie Abella</h4>
                        <p>Medical Doctor</p>
                        <div class="staff-schedule">Schedule: 8:00 AM – 12:00 NN (South Campus- Extension Clinic)</div>
                    </div>
                    <div class="staff-card">
                        <h4>Dr. Hermogina Jao- Co</h4>
                        <p>Medical Doctor</p>
                        <div class="staff-schedule">Schedule: 1:30 PM – 5:30 PM</div>
                    </div>
                    <div class="staff-card">
                        <h4>Dr. Rosalinda Margallo</h4>
                        <p>Medical Doctor</p>
                        <div class="staff-schedule">Schedule: 1:30 PM – 7:30 PM (South Campus- Extension Clinic)</div>
                    </div>
                </div>
            </div>

            <div class="staff-category">
                <h3>DENTAL STAFF</h3>
                <div class="staff-grid">
                    <div class="staff-card">
                        <h4>Dr. Concepcion Tundag</h4>
                        <p>Dentist</p>
                        <div class="staff-schedule">Schedule: 8:00 AM - 12:00 NN</div>
                    </div>
                    <div class="staff-card">
                        <h4>Dr. Cherryl Abineta- Asibal</h4>
                        <p>Dentist</p>
                        <div class="staff-schedule">Schedule: 8:00 AM - 5:00 PM</div>
                    </div>
                    <div class="staff-card">
                        <h4>Dr. Emmanuel Mercado</h4>
                        <p>Dentist</p>
                        <div class="staff-schedule">Schedule: 1:00 PM - 5:00 PM</div>
                    </div>
                    <div class="staff-card">
                        <h4>Dr. Frances Mae Licong</h4>
                        <p>Dentist</p>
                        <div class="staff-schedule">Schedule: 8:00 AM - 5:00 PM (High School/ Grade School)</div>
                    </div>
                </div>
            </div>

            <div class="staff-category">
                <h3>NURSING STAFF</h3>
                <div class="staff-grid">
                    <div class="staff-card">
                        <h4>Mrs. Paz Colina Po, BSN, RN</h4>
                        <p>Nurse</p>
                        <div class="staff-schedule">Schedule: 8:00 AM - 5:00 PM (High School/ Grade School)</div>
                    </div>
                    <div class="staff-card">
                        <h4>Mrs. Charlene Gallentes, BSN, RN</h4>
                        <p>Nurse</p>
                        <div class="staff-schedule">Schedule: 8:00 AM - 5:00 PM</div>
                    </div>
                    <div class="staff-card">
                        <h4>Dr. Lloyd Dabon, DMD, BSN, RN</h4>
                        <p>Nurse</p>
                        <div class="staff-schedule">Schedule: 1:30 PM - 9:30 PM</div>
                    </div>
                    <div class="staff-card">
                        <h4>Mrs. Nancy Ong, BSN, RN</h4>
                        <p>Nurse</p>
                        <div class="staff-schedule">Schedule: 8:00 AM - 5:00 PM (South Campus- Extension Clinic)</div>
                    </div>
                    <div class="staff-card">
                        <h4>Ms. Therese Bacalso, BSN, RN</h4>
                        <p>Nurse</p>
                        <div class="staff-schedule">Schedule: 10:30 AM - 7:30 PM (South Campus- Extension Clinic)</div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Objectives Section -->
    <section class="section" id="objectives">
        <div class="section-header">
            <h2>Department Objectives</h2>
            <p>Our commitment to comprehensive healthcare services</p>
        </div>
        <div class="objectives">
            <h3>DEPARTMENT OBJECTIVES:</h3>
            <ul class="objectives-list">
                <li>Provide preventive measures through BP taking and physical examination, oral examination and prophylaxis;</li>
                <li>Diagnose diseases based on the patient's history, clinical and laboratory findings;</li>
                <li>Give treatment to specific diseases based on diagnosis.</li>
                <li>Conduct Medical- Dental awareness and education through posters and counseling.</li>
            </ul>
        </div>
    </section>
</div>

<!-- Footer -->
<footer class="footer" id="contact">
    <div class="container">
        <div class="footer-content">
            <div class="footer-section">
                <h4>QuickClinique</h4>
                <p>University of Cebu Medical-Dental Clinic - Providing quality healthcare services to the UC community.</p>
            </div>
            <div class="footer-section">
                <h4>Quick Links</h4>
                <ul>
                    <li><a href="#home"><i class="fas fa-chevron-right"></i> Home</a></li>
                    <li><a href="#dashboard"><i class="fas fa-chevron-right"></i> Dashboard</a></li>
                    <li><a href="#dental-schedule"><i class="fas fa-chevron-right"></i> Dental Schedule</a></li>
                    <li><a href="#messaging"><i class="fas fa-chevron-right"></i> Messages</a></li>
                    <li><a href="#mission"><i class="fas fa-chevron-right"></i> Mission & Vision</a></li>
                    <li><a href="#staff"><i class="fas fa-chevron-right"></i> Medical Staff</a></li>
                    <li><a href="#objectives"><i class="fas fa-chevron-right"></i> Objectives</a></li>
                </ul>
            </div>
            <div class="footer-section">
                <h4>Contact Info</h4>
                <ul>
                    <li><i class="fas fa-map-marker-alt"></i> Sanciangko St, Cebu City, 6000 Cebu</li>
                    <li><i class="fas fa-building"></i> Main Office: (032) 255-7777</li>
                    <li><i class="fas fa-phone"></i> Registrar: (032) 253-9434</li>
                    <li><i class="fas fa-phone-volume"></i> Local: 255-7777 ext. 4167</li>
                    <li><i class="fas fa-envelope"></i> main.collegeregistrar@uc.edu.ph</li>
                    <li><i class="fas fa-clock"></i> Mon - Fri: 8:00 AM - 5:00 PM</li>
                </ul>
            </div>
        </div>
        <div class="footer-bottom">
            <p>&copy; 2025 University of Cebu Medical-Dental Clinic. All rights reserved.</p>
        </div>
    </div>
</footer>

@section Scripts {
    <script>
        // Enhanced appointment functionality
        let availableSlots = [];
        let availableDates = [];

        // DOM Ready
        document.addEventListener('DOMContentLoaded', function() {
            initializeEnhancedAppointment();
            updateQueueStatus();
            startQueueAutoRefresh();
        });

        function initializeEnhancedAppointment() {
            const appointmentDate = document.getElementById('appointmentDate');
            const availableSlotsSelect = document.getElementById('availableSlots');

            availableSlotsSelect.innerHTML = '<option value="">Select a date first</option>';
            availableSlotsSelect.disabled = true;

            const today = new Date().toISOString().split('T')[0];
            appointmentDate.min = today;

            loadAvailableDates().then(() => {
                setupDateInput();
            });

            appointmentDate.addEventListener('change', function() {
                const selectedDate = this.value;
                if (selectedDate && isDateAvailable(selectedDate)) {
                    loadAvailableSlots(selectedDate);
                } else {
                    availableSlotsSelect.innerHTML = '<option value="">Selected date is not available</option>';
                    availableSlotsSelect.disabled = true;
                }
            });

            const appointmentForm = document.getElementById('appointmentForm');
            appointmentForm.addEventListener('submit', handleEnhancedAppointmentSubmit);

            const refreshBtn = document.getElementById('refreshQueue');
            if (refreshBtn) {
                refreshBtn.addEventListener('click', function() {
                    const icon = this.querySelector('i');
                    if (icon) {
                        icon.classList.add('fa-spin');
                        updateQueueStatus().finally(() => {
                            icon.classList.remove('fa-spin');
                        });
                    } else {
                        updateQueueStatus();
                    }
                });
            }
        }

        function displayEnhancedAppointmentHistory(appointments) {
            const historyList = document.getElementById('historyList');

            if (appointments && appointments.length > 0) {
                historyList.innerHTML = appointments.map(appointment => {
                    const startTime = formatTime(appointment.schedule?.startTime);
                    const endTime = formatTime(appointment.schedule?.endTime);

                    return `
                        <div class="history-item ${appointment.appointmentStatus.toLowerCase()}">
                            <div class="history-main">
                                <div class="history-date">
                                    <strong>Date:</strong> ${new Date(appointment.schedule?.date).toLocaleDateString()}
                                </div>
                                <div class="history-time">
                                    <strong>Time:</strong> ${startTime} - ${endTime}
                                </div>
                                <div class="history-service">
                                    <strong>Service:</strong> ${appointment.reasonForVisit}
                                </div>
                                <div class="history-symptoms">
                                    <strong>Symptoms:</strong> ${appointment.symptoms || 'Not specified'}
                                </div>
                            </div>
                            <div class="history-meta">
                                <div class="history-status ${appointment.appointmentStatus.toLowerCase()}">
                                    ${appointment.appointmentStatus}
                                </div>
                                <div class="history-queue">Queue: ${appointment.queueNumber}</div>
                                ${appointment.appointmentStatus === 'Pending' ?
                                    `<button class="cancel-btn" onclick="cancelAppointment(${appointment.appointmentId})">
                                        <i class="fas fa-times"></i> Cancel
                                    </button>` : ''
                                }
                            </div>
                        </div>
                    `;
                }).join('');
            } else {
                historyList.innerHTML = '<div class="no-records">No appointment records found.</div>';
            }
        }

        async function handleEnhancedAppointmentSubmit(e) {
            e.preventDefault();

            const submitBtn = document.getElementById('submitAppointment');
            const messageContainer = document.getElementById('appointmentMessage');

            if (!validateEnhancedAppointmentForm()) {
                showMessage('Please fix the errors above before submitting.', 'error');
                return;
            }

            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
            messageContainer.innerHTML = '';

            try {
                const scheduleId = document.getElementById('availableSlots').value;
                const serviceRequired = document.getElementById('serviceRequired').value;
                const symptoms = document.getElementById('symptoms').value;

                let patientId;
                try {
                    patientId = await getCurrentPatientId();
                } catch (error) {
                    showMessage(error.message, 'error');
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-calendar-check"></i> Submit Appointment Request';
                    return;
                }

                if (!scheduleId || scheduleId === '' || isNaN(parseInt(scheduleId))) {
                    showMessage('Please select a date and time slot before submitting.', 'error');
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-calendar-check"></i> Submit Appointment Request';
                    return;
                }

                if (!serviceRequired || serviceRequired.trim() === '') {
                    showMessage('Please select a service before submitting.', 'error');
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-calendar-check"></i> Submit Appointment Request';
                    return;
                }

                const parsedScheduleId = parseInt(scheduleId, 10);
                if (isNaN(parsedScheduleId) || parsedScheduleId <= 0) {
                    showMessage('Invalid schedule selected. Please select a valid time slot.', 'error');
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-calendar-check"></i> Submit Appointment Request';
                    return;
                }

                const formData = {
                    ScheduleId: parsedScheduleId,
                    PatientId: patientId,
                    ReasonForVisit: serviceRequired,
                    Symptoms: symptoms.trim() || "No symptoms provided"
                };

                const token = getAntiForgeryToken();

                const formDataToSend = new FormData();
                formDataToSend.append('ScheduleId', formData.ScheduleId.toString());
                formDataToSend.append('PatientId', formData.PatientId.toString());
                formDataToSend.append('ReasonForVisit', formData.ReasonForVisit);
                formDataToSend.append('Symptoms', formData.Symptoms);

                if (token) {
                    formDataToSend.append('__RequestVerificationToken', token);
                }

                const response = await fetch('/Appointments/Create', {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: formDataToSend
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();

                if (result.success) {
                    const queueMessage = result.queueNumber ?
                        `Appointment booked successfully! Your queue number is ${result.queueNumber}.` :
                        'Appointment booked successfully!';

                    showMessage(queueMessage, 'success');

                    document.getElementById('appointmentForm').reset();
                    document.getElementById('availableSlots').innerHTML = '<option value="">Select a date first</option>';
                    document.getElementById('availableSlots').disabled = true;

                    setTimeout(() => {
                        loadAvailableDates();
                        loadAppointmentHistory();
                        updateQueueStatus();
                    }, 1000);

                    clearValidationErrors();
                } else {
                    let errorMessage = result.error || 'Failed to book appointment';
                    if (result.errors) {
                        displayEnhancedFormErrors(result.errors);
                        errorMessage = 'Please fix the validation errors above.';
                    }
                    showMessage(errorMessage, 'error');
                }
            } catch (error) {
                console.error('Error booking appointment:', error);

                let userMessage = 'An error occurred while booking the appointment. ';

                if (error.message.includes('400')) {
                    userMessage += 'This might be due to a security token issue. Please refresh the page and try again.';
                } else if (error.message.includes('500')) {
                    userMessage += 'Server error. Please try again later.';
                } else {
                    userMessage += 'Please try again.';
                }

                showMessage(userMessage, 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<i class="fas fa-calendar-check"></i> Submit Appointment Request';
            }
        }

        function setupDateInput() {
            const appointmentDate = document.getElementById('appointmentDate');
            const dateError = document.getElementById('dateError');

            appointmentDate.addEventListener('input', function() {
                const selectedDate = this.value;
                validateSelectedDate(selectedDate);
            });

            appointmentDate.addEventListener('change', function() {
                const selectedDate = this.value;
                validateSelectedDate(selectedDate);
            });

            appointmentDate.availableDates = availableDates;
        }

        function validateSelectedDate(selectedDate) {
            const dateError = document.getElementById('dateError');
            const availableSlotsSelect = document.getElementById('availableSlots');

            if (!selectedDate) {
                dateError.textContent = '';
                availableSlotsSelect.innerHTML = '<option value="">Select a date first</option>';
                availableSlotsSelect.disabled = true;
                return false;
            }

            if (!isDateAvailable(selectedDate)) {
                dateError.textContent = 'Selected date is not available for appointments. Please choose from available dates.';
                availableSlotsSelect.innerHTML = '<option value="">Selected date is not available</option>';
                availableSlotsSelect.disabled = true;
                return false;
            } else {
                dateError.textContent = '';
                return true;
            }
        }

        function isDateAvailable(dateString) {
            return availableDates.includes(dateString);
        }

        async function loadAvailableDates() {
            try {
                const response = await fetch('/Appointments/GetAvailableDates');
                const result = await response.json();

                if (result.success && result.data && result.data.length > 0) {
                    availableDates = result.data.map(date => {
                        if (typeof date === 'string') {
                            return date.split('T')[0];
                        }
                        return new Date(date).toISOString().split('T')[0];
                    }).filter(date => date);

                    updateAvailableDatesUI();

                    if (availableDates.length > 0) {
                        const appointmentDate = document.getElementById('appointmentDate');
                        const firstAvailableDate = availableDates[0];
                        appointmentDate.value = firstAvailableDate;

                        setTimeout(() => {
                            loadAvailableSlots(firstAvailableDate);
                        }, 100);
                    }

                    return availableDates;
                } else {
                    availableDates = [];
                    updateAvailableDatesUI();
                    return [];
                }
            } catch (error) {
                console.error('Error loading available dates:', error);
                availableDates = [];
                updateAvailableDatesUI();
                return [];
            }
        }

        function updateAvailableDatesUI() {
            const appointmentDate = document.getElementById('appointmentDate');

            const existingHint = appointmentDate.parentNode.querySelector('.available-dates-hint');
            if (existingHint) {
                existingHint.remove();
            }

            if (availableDates.length > 0) {
                const hint = document.createElement('div');
                hint.className = 'available-dates-hint';

                const nextDates = availableDates.slice(0, 5).map(date => {
                    const dateObj = new Date(date);
                    return dateObj.toLocaleDateString('en-US', {
                        weekday: 'short',
                        month: 'short',
                        day: 'numeric'
                    });
                });

                let hintText = `<strong>Available Dates:</strong> ${nextDates.join(', ')}`;
                if (availableDates.length > 5) {
                    hintText += ` and ${availableDates.length - 5} more`;
                }

                hint.innerHTML = hintText;
                appointmentDate.parentNode.appendChild(hint);
            } else {
                const hint = document.createElement('div');
                hint.className = 'available-dates-hint no-dates';
                hint.innerHTML = '<strong>No available dates found. Please check back later.</strong>';
                appointmentDate.parentNode.appendChild(hint);
            }
        }

        function enhanceDatePicker() {
            const appointmentDate = document.getElementById('appointmentDate');
            let lastValidValue = '';

            appointmentDate.addEventListener('blur', function() {
                const selectedDate = this.value;
                if (selectedDate && !isDateAvailable(selectedDate)) {
                    this.value = lastValidValue;
                    validateSelectedDate(this.value);
                } else if (selectedDate) {
                    lastValidValue = selectedDate;
                }
            });

            appointmentDate.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    const selectedDate = this.value;
                    if (selectedDate && !isDateAvailable(selectedDate)) {
                        e.preventDefault();
                        this.value = lastValidValue;
                        validateSelectedDate(this.value);
                    }
                }
            });
        }

        async function loadAvailableSlots(selectedDate) {
            const availableSlotsSelect = document.getElementById('availableSlots');
            const slotLoading = document.getElementById('slotLoading');
            const dateError = document.getElementById('dateError');

            if (!selectedDate) {
                availableSlotsSelect.innerHTML = '<option value="">Select a date first</option>';
                availableSlotsSelect.disabled = true;
                dateError.textContent = '';
                return;
            }

            if (!isDateAvailable(selectedDate)) {
                availableSlotsSelect.innerHTML = '<option value="">Selected date is not available</option>';
                availableSlotsSelect.disabled = true;
                dateError.textContent = 'Selected date is not available for appointments.';
                return;
            }

            try {
                slotLoading.style.display = 'block';
                availableSlotsSelect.disabled = true;
                availableSlotsSelect.innerHTML = '<option value="">Loading available slots...</option>';
                dateError.textContent = '';

                const response = await fetch(`/Appointments/GetAvailableSlots?date=${selectedDate}`);
                const result = await response.json();

                if (result.success) {
                    if (result.data && result.data.length > 0) {
                        availableSlots = result.data;
                        availableSlotsSelect.innerHTML = '<option value="">Select a time slot</option>';

                        result.data.forEach(slot => {
                            const option = document.createElement('option');
                            const scheduleId = slot.scheduleId || slot.ScheduleId;
                            option.value = scheduleId;

                            let displayText;

                            if (slot.displayText || slot.DisplayText) {
                                displayText = slot.displayText || slot.DisplayText;
                            } else if (slot.startTimeFormatted && slot.endTimeFormatted) {
                                displayText = `${slot.startTimeFormatted} - ${slot.endTimeFormatted}`;
                            } else if (slot.StartTimeFormatted && slot.EndTimeFormatted) {
                                displayText = `${slot.StartTimeFormatted} - ${slot.EndTimeFormatted}`;
                            } else {
                                const startTime = formatTimeString(slot.startTime || slot.StartTime);
                                const endTime = formatTimeString(slot.endTime || slot.EndTime);
                                displayText = `${startTime} - ${endTime}`;
                            }

                            option.textContent = displayText;
                            option.dataset.slotInfo = JSON.stringify(slot);
                            availableSlotsSelect.appendChild(option);
                        });

                        availableSlotsSelect.disabled = false;
                        showSlotCountInfo(result.data.length);
                        dateError.textContent = '';
                    } else {
                        availableSlotsSelect.innerHTML = '<option value="">No available time slots for this date</option>';
                        availableSlotsSelect.disabled = true;
                        showSlotCountInfo(0);
                        dateError.textContent = 'No available time slots found for the selected date.';
                    }
                } else {
                    availableSlotsSelect.innerHTML = '<option value="">Error loading slots</option>';
                    availableSlotsSelect.disabled = true;
                    dateError.textContent = result.error || 'Error loading available slots';
                }
            } catch (error) {
                console.error('Error loading available slots:', error);
                availableSlotsSelect.innerHTML = '<option value="">Error loading slots</option>';
                availableSlotsSelect.disabled = true;
                dateError.textContent = 'Network error loading available slots.';
                showSlotCountInfo(0);
            } finally {
                slotLoading.style.display = 'none';
            }
        }

        function formatTimeString(timeStr) {
            if (!timeStr) return 'N/A';

            if (typeof timeStr === 'string') {
                const timeWithoutSeconds = timeStr.split(':').slice(0, 2).join(':');
                const [hours, minutes] = timeWithoutSeconds.split(':').map(Number);

                if (!isNaN(hours) && !isNaN(minutes)) {
                    const period = hours >= 12 ? 'PM' : 'AM';
                    const displayHours = hours % 12 || 12;
                    const displayMinutes = minutes.toString().padStart(2, '0');
                    return `${displayHours}:${displayMinutes} ${period}`;
                }
            }

            return 'N/A';
        }

        function showSlotCountInfo(count) {
            const availableSlotsSelect = document.getElementById('availableSlots');

            const existingInfo = availableSlotsSelect.parentNode.querySelector('.slot-count-info');
            if (existingInfo) {
                existingInfo.remove();
            }

            if (count > 0) {
                const info = document.createElement('small');
                info.className = 'form-text text-muted slot-count-info';
                info.textContent = `${count} available slot(s) found`;
                availableSlotsSelect.parentNode.appendChild(info);
            }
        }

        function validateEnhancedAppointmentForm() {
            let isValid = true;
            const dateError = document.getElementById('dateError');
            const slotError = document.getElementById('slotError');
            const serviceError = document.getElementById('serviceError');

            clearValidationErrors();

            const appointmentDate = document.getElementById('appointmentDate').value;
            const availableSlot = document.getElementById('availableSlots').value;
            const serviceRequired = document.getElementById('serviceRequired').value;

            if (!appointmentDate) {
                dateError.textContent = 'Please select appointment date';
                isValid = false;
            } else if (!isDateAvailable(appointmentDate)) {
                dateError.textContent = 'Selected date is not available for appointments. Please choose from available dates.';
                isValid = false;
            }

            if (!availableSlot) {
                slotError.textContent = 'Please select an available time slot';
                isValid = false;
            }

            if (!serviceRequired) {
                serviceError.textContent = 'Please select a service';
                isValid = false;
            }

            return isValid;
        }

        function clearValidationErrors() {
            const errorElements = document.querySelectorAll('.validation-error');
            errorElements.forEach(element => {
                element.textContent = '';
            });
        }

        let cachedStudentId = null;

        async function getCurrentPatientId() {
            if (cachedStudentId !== null) {
                return cachedStudentId;
            }

            try {
                const response = await fetch('/Student/GetCurrentStudentId');
                const result = await response.json();

                if (result.success && result.studentId) {
                    cachedStudentId = result.studentId;
                    return cachedStudentId;
                } else {
                    throw new Error('You must be logged in as a student to book an appointment');
                }
            } catch (error) {
                console.error('Error fetching student ID:', error);
                throw new Error('Unable to verify login status. Please log in again.');
            }
        }

        function displayEnhancedFormErrors(errors) {
            clearValidationErrors();

            for (const [field, messages] of Object.entries(errors)) {
                if (messages && messages.length > 0) {
                    let errorElement;

                    switch(field) {
                        case 'PatientId':
                            errorElement = document.getElementById('patientError');
                            break;
                        case 'ScheduleId':
                            errorElement = document.getElementById('slotError');
                            break;
                        case 'ReasonForVisit':
                            errorElement = document.getElementById('serviceError');
                            break;
                        case 'Symptoms':
                            errorElement = document.getElementById('symptomsError');
                            break;
                        default:
                            errorElement = document.getElementById(field + 'Error');
                    }

                    if (errorElement && messages.length > 0) {
                        errorElement.textContent = messages[0];
                    }
                }
            }
        }

        function showMessage(message, type) {
            const messageContainer = document.getElementById('appointmentMessage');
            const alertClass = type === 'success' ? 'alert-success' :
                              type === 'error' ? 'alert-error' : 'alert-info';

            messageContainer.innerHTML = `
                <div class="alert ${alertClass}">
                    <div class="message-content">${message}</div>
                    <button class="close-btn" onclick="this.parentElement.remove()">&times;</button>
                </div>
            `;

            if (type === 'success') {
                setTimeout(() => {
                    const alert = messageContainer.querySelector('.alert');
                    if (alert) {
                        alert.remove();
                    }
                }, 5000);
            }
        }

        function getAntiForgeryToken() {
            let token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

            if (!token) {
                token = document.querySelector('input[type="hidden"][name="__RequestVerificationToken"]')?.value;
            }

            if (!token) {
                const tokenElement = document.querySelector('[name="__RequestVerificationToken"], [data-token]');
                token = tokenElement?.value || tokenElement?.dataset?.token;
            }

            if (!token) {
                const metaToken = document.querySelector('meta[name="__RequestVerificationToken"]');
                token = metaToken?.getAttribute('content');
            }

            return token;
        }

        // Queue functionality
        let queueUpdateInterval = null;
        const QUEUE_UPDATE_INTERVAL = 10000;

        async function updateQueueStatus() {
            try {
                let studentId = null;
                try {
                    studentId = await getCurrentPatientId();
                } catch (error) {
                    console.log('No student logged in, showing general queue status');
                }

                const url = studentId
                    ? `/Appointments/GetQueueStatus?studentId=${studentId}`
                    : '/Appointments/GetQueueStatus';

                const response = await fetch(url);
                const result = await response.json();

                if (result.success && result.data) {
                    displayQueueStatus(result.data);
                }
            } catch (error) {
                console.error('Error updating queue status:', error);
            }
        }

        function displayQueueStatus(data) {
            const nowServingElement = document.getElementById('nowServing');
            if (data.nowServing) {
                nowServingElement.innerHTML = '<strong>Queue #' + data.nowServing.queueNumber + '</strong><br>' +
                    '<small>' + (data.nowServing.service || 'General Consultation') + '</small>';
                nowServingElement.style.color = '#28a745';
                nowServingElement.style.fontWeight = 'bold';
            } else {
                nowServingElement.textContent = 'No consultation active';
                nowServingElement.style.color = '#6c757d';
                nowServingElement.style.fontWeight = 'normal';
            }

            const waitingCountElement = document.getElementById('waitingCount');
            waitingCountElement.textContent = data.waitingCount + ' patient(s)';
            waitingCountElement.style.color = data.waitingCount > 0 ? '#007bff' : '#6c757d';

            const queueMessageElement = document.getElementById('queueMessage');
            const userQueueNumberElement = document.getElementById('userQueueNumber');

            if (data.userQueueNumber) {
                userQueueNumberElement.innerHTML = '<span style="font-size: 2rem; font-weight: bold; color: #007bff;">' +
                    '#' + data.userQueueNumber + '</span>';

                let statusMessage = '';
                let statusColor = '';
                let statusIcon = '';

                switch (data.userQueueStatus) {
                    case 'Waiting':
                        statusIcon = '<i class="fas fa-clock"></i>';
                        statusColor = '#ffc107';
                        if (data.userPosition) {
                            statusMessage = 'You are #' + data.userPosition + ' in line. Please wait for your turn.';
                        } else {
                            statusMessage = 'You are in the queue. Please wait for your turn.';
                        }
                        break;
                    case 'Being Served':
                        statusIcon = '<i class="fas fa-user-md"></i>';
                        statusColor = '#28a745';
                        statusMessage = 'You are currently being served. Please proceed to the clinic.';
                        break;
                    case 'Pending':
                        statusIcon = '<i class="fas fa-hourglass-half"></i>';
                        statusColor = '#6c757d';
                        statusMessage = 'Your appointment is pending confirmation.';
                        break;
                    default:
                        statusIcon = '<i class="fas fa-info-circle"></i>';
                        statusColor = '#007bff';
                        statusMessage = 'You have an appointment today.';
                }

                queueMessageElement.innerHTML = '<div style="padding: 1rem; background-color: ' + statusColor + '20; border-left: 4px solid ' + statusColor + '; border-radius: 0.375rem;">' +
                    statusIcon + ' <strong style="color: ' + statusColor + ';">' + statusMessage + '</strong></div>';
            } else {
                userQueueNumberElement.innerHTML = '<span style="color: #6c757d;">-</span>';
                queueMessageElement.innerHTML = '<p style="color: #6c757d; font-style: italic;">' +
                    '<i class="fas fa-info-circle"></i> You have no active appointment in the queue today.</p>';
            }
        }

        function startQueueAutoRefresh() {
            if (queueUpdateInterval) {
                clearInterval(queueUpdateInterval);
            }

            queueUpdateInterval = setInterval(function() {
                updateQueueStatus();
            }, QUEUE_UPDATE_INTERVAL);
        }

        function stopQueueAutoRefresh() {
            if (queueUpdateInterval) {
                clearInterval(queueUpdateInterval);
                queueUpdateInterval = null;
            }
        }

        window.addEventListener('beforeunload', stopQueueAutoRefresh);
    </script>
}