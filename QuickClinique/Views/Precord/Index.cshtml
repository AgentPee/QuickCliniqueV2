@model IEnumerable<QuickClinique.Models.Student>
@{
    ViewData["Title"] = "Patient Management";
    Layout = "_Layout";
}

@section Styles {
    <link rel="stylesheet" href="~/css/precord.css" asp-append-version="true" />
}

<div class="patients-container">
    @Html.AntiForgeryToken()
    
    <div class="page-header">
        <h1>
            <i class="fas fa-users"></i>
            Patient Management
        </h1>
    </div>

    <div class="search-section">
        <div class="search-box">
            <input type="text" id="searchInput" placeholder="Search by name, ID number, email, or phone..." />
            <button onclick="searchPatients()">
                <i class="fas fa-search"></i> Search
            </button>
        </div>
    </div>

        @if (Model != null && Model.Any())
        {
        <div class="patients-table-container">
            <table class="patients-table">
                <thead>
                    <tr>
                        <th>ID Number</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="patientsTableBody">
                    @foreach (var patient in Model)
                    {
                        <tr data-search="@patient.Idnumber @patient.FirstName @patient.LastName @patient.Email @patient.PhoneNumber">
                            <td>@patient.Idnumber</td>
                            <td>
                                <span class="patient-name">@patient.FirstName @patient.LastName</span>
                            </td>
                            <td>@patient.Email</td>
                            <td>@patient.PhoneNumber</td>
                            <td>
                                <div class="action-buttons">
                                    <button onclick="showDetailsModal(@patient.StudentId)" class="btn-action btn-view">
                                        <i class="fas fa-eye"></i> Details
                                    </button>
                                    <button onclick="showEditModal(@patient.StudentId)" class="btn-action btn-edit">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                    <button onclick="showDeleteModal(@patient.StudentId, '@patient.FirstName @patient.LastName')" class="btn-action btn-delete">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="empty-state">
            <i class="fas fa-users"></i>
            <h3>No Patients Registered</h3>
            <p>There are currently no patients registered in the system.</p>
                        </div>
    }
                    </div>

<!-- Details Modal -->
<div id="detailsModal" class="modal">
    <div class="modal-content modal-large">
        <div class="modal-header">
            <h2><i class="fas fa-user-circle"></i> Patient Details</h2>
            <button class="modal-close" onclick="closeModal('detailsModal')">&times;</button>
        </div>
        <div class="modal-body" id="detailsModalBody">
            <div class="loading-spinner">
                <i class="fas fa-spinner fa-spin"></i> Loading...
            </div>
        </div>
                            </div>
                        </div>

<!-- Edit Modal -->
<div id="editModal" class="modal">
    <div class="modal-content modal-medium">
        <div class="modal-header">
            <h2><i class="fas fa-edit"></i> Edit Patient Information</h2>
            <button class="modal-close" onclick="closeModal('editModal')">&times;</button>
        </div>
        <div class="modal-body" id="editModalBody">
            <div class="loading-spinner">
                <i class="fas fa-spinner fa-spin"></i> Loading...
                            </div>
                        </div>
                            </div>
                        </div>

<!-- Delete Modal -->
<div id="deleteModal" class="modal">
    <div class="modal-content modal-small">
        <div class="modal-header modal-header-danger">
            <h2><i class="fas fa-exclamation-triangle"></i> Confirm Delete</h2>
            <button class="modal-close" onclick="closeModal('deleteModal')">&times;</button>
                                </div>
        <div class="modal-body">
            <p id="deleteMessage" style="font-size: 1.1rem; margin-bottom: 2rem; text-align: center;"></p>
            <div style="display: flex; gap: 1rem; justify-content: center;">
                <button onclick="closeModal('deleteModal')" class="btn-action btn-view" style="padding: 0.75rem 2rem;">
                    <i class="fas fa-times"></i> Cancel
                </button>
                <button onclick="confirmDelete()" class="btn-action btn-delete" style="padding: 0.75rem 2rem;">
                            <i class="fas fa-trash"></i> Delete
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentDeleteId = null;

        function searchPatients() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const rows = document.querySelectorAll('#patientsTableBody tr');
            let visibleCount = 0;

            rows.forEach(row => {
                const searchData = row.getAttribute('data-search').toLowerCase();
                if (searchData.includes(searchTerm)) {
                    row.style.display = '';
                    visibleCount++;
                } else {
                    row.style.display = 'none';
                }
            });

            if (visibleCount === 0 && searchTerm) {
                showNoResultsMessage();
            } else {
                removeNoResultsMessage();
            }
        }

        function showNoResultsMessage() {
            let existingMessage = document.getElementById('noResultsMessage');
            if (!existingMessage) {
                const tbody = document.getElementById('patientsTableBody');
                const row = tbody.insertRow(0);
                row.id = 'noResultsMessage';
                const cell = row.insertCell(0);
                cell.colSpan = 5;
                cell.style.textAlign = 'center';
                cell.style.padding = '2rem';
                cell.style.color = '#718096';
                cell.innerHTML = '<i class="fas fa-search" style="font-size: 2rem; display: block; margin-bottom: 1rem; color: #cbd5e0;"></i><p style="margin: 0;">No patients match your search criteria.</p>';
            }
        }

        function removeNoResultsMessage() {
            const message = document.getElementById('noResultsMessage');
            if (message) {
                message.remove();
            }
        }

        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchPatients();
            }
        });

        document.getElementById('searchInput').addEventListener('input', searchPatients);

        // Modal Functions
        function openModal(modalId) {
            document.getElementById(modalId).style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        window.onclick = function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
        }

        // Details Modal
        async function showDetailsModal(patientId) {
            openModal('detailsModal');
            const modalBody = document.getElementById('detailsModalBody');
            modalBody.innerHTML = '<div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i> Loading...</div>';

            try {
                const response = await fetch(`/Precord/Details/${patientId}`);
                if (!response.ok) throw new Error('Failed to load patient details');
                
                const html = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const content = doc.querySelector('.patient-details-container');
                
                if (content) {
                    // Remove back button
                    const backBtn = content.querySelector('.btn-back');
                    if (backBtn) backBtn.remove();
                    
                    // Remove bottom buttons
                    const bottomButtons = content.querySelector('div[style*="margin-top: 2rem"]');
                    if (bottomButtons) bottomButtons.remove();
                    
                    modalBody.innerHTML = content.innerHTML;
                } else {
                    modalBody.innerHTML = '<p style="text-align: center; color: #dc3545;">Failed to load patient details.</p>';
                }
            } catch (error) {
                console.error('Error:', error);
                modalBody.innerHTML = '<p style="text-align: center; color: #dc3545;">Error loading patient details. Please try again.</p>';
            }
        }

        // Edit Modal
        async function showEditModal(patientId) {
            openModal('editModal');
            const modalBody = document.getElementById('editModalBody');
            modalBody.innerHTML = '<div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i> Loading...</div>';

            try {
                const response = await fetch(`/Precord/EditPatient/${patientId}`);
                if (!response.ok) throw new Error('Failed to load patient data');
                
                const html = await response.text();
                modalBody.innerHTML = html;
                
                // Setup form submission
                const form = document.getElementById('editPatientForm');
                if (form) {
                    form.addEventListener('submit', (e) => submitEditForm(e, patientId));
                } else {
                    modalBody.innerHTML = '<p style="text-align: center; color: #dc3545;">Failed to load edit form.</p>';
                }
            } catch (error) {
                console.error('Error:', error);
                modalBody.innerHTML = '<p style="text-align: center; color: #dc3545;">Error loading edit form. Please try again.</p>';
            }
        }

        async function submitEditForm(event, patientId) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalHtml = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
            submitBtn.disabled = true;

            try {
                const response = await fetch(`/Precord/EditPatient/${patientId}`, {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    showNotification(result.message || 'Patient information updated successfully!', 'success');
                    closeModal('editModal');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    // Display validation errors
                    let errorMessage = result.message || 'Failed to update patient information.';
                    
                    if (result.errors) {
                        // Display specific field errors
                        const errorList = Object.entries(result.errors)
                            .map(([field, errors]) => `${field}: ${errors.join(', ')}`)
                            .join('<br>');
                        errorMessage += '<br><small>' + errorList + '</small>';
                    }
                    
                    showNotification(errorMessage, 'error');
                    submitBtn.innerHTML = originalHtml;
                    submitBtn.disabled = false;
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('Error updating patient information. Please try again.', 'error');
                submitBtn.innerHTML = originalHtml;
                submitBtn.disabled = false;
            }
        }

        // Delete Modal
        function showDeleteModal(patientId, patientName) {
            currentDeleteId = patientId;
            document.getElementById('deleteMessage').textContent = 
                `Are you sure you want to delete patient "${patientName}"? This action cannot be undone and will also delete all associated records.`;
            openModal('deleteModal');
        }

        async function confirmDelete() {
            if (!currentDeleteId) return;

            const deleteModal = document.getElementById('deleteModal');
            const modalBody = deleteModal.querySelector('.modal-body');
            modalBody.innerHTML = '<div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i> Deleting...</div>';

            try {
                const formData = new FormData();
                
                // Get or create anti-forgery token
                let token = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!token) {
                    // Create a temporary form to get the token
                    const tempForm = document.createElement('form');
                    tempForm.innerHTML = '@Html.AntiForgeryToken()';
                    token = tempForm.querySelector('input[name="__RequestVerificationToken"]');
                }
                
                if (token) {
                    formData.append('__RequestVerificationToken', token.value);
                }

                const response = await fetch(`/Precord/DeletePatient/${currentDeleteId}`, {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    showNotification(result.message || 'Patient deleted successfully!', 'success');
                    closeModal('deleteModal');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    throw new Error(result.message || 'Failed to delete patient');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('Error deleting patient. Please try again.', 'error');
                closeModal('deleteModal');
            }
        }

        // Notification System
        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
                <div>${message}</div>
            `;
            notification.style.maxWidth = '500px';
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.classList.add('show');
            }, 100);

            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 5000);
        }
    </script>
}
