@model QuickClinique.Controllers.DashboardViewModel
@{
    ViewData["Title"] = "Clinic Staff Dashboard";
    Layout = "_Layout";
}

@section Styles {
    <link rel="stylesheet" href="~/css/dashboard-index.css" asp-append-version="true" />
    
}

<div class="dashboard-container">
    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <h1><i class="fas fa-tachometer-alt"></i> Clinic Staff Dashboard</h1>
        <p>Welcome back, @Context.Session.GetString("ClinicStaffName")! Here's what's happening today.</p>
    </div>

    <!-- Statistics Cards -->
    <div class="stats-grid">
        <div class="stat-card total">
            <div class="stat-number">@Model.TotalAppointments</div>
            <div class="stat-label">Total Appointments</div>
        </div>
        <div class="stat-card pending">
            <div class="stat-number">@Model.PendingCount</div>
            <div class="stat-label">Pending</div>
        </div>
        <div class="stat-card confirmed">
            <div class="stat-number">@Model.ConfirmedCount</div>
            <div class="stat-label">Confirmed</div>
        </div>
        <div class="stat-card completed">
            <div class="stat-number">@Model.CompletedCount</div>
            <div class="stat-label">Completed</div>
        </div>
        <div class="stat-card patients">
            <div class="stat-number">@Model.TotalPatients</div>
            <div class="stat-label">Total Patients</div>
        </div>
        <div class="stat-card slots">
            <div class="stat-number">@Model.AvailableSlots</div>
            <div class="stat-label">Available Slots</div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="content-grid">
        <div class="main-content">
            <!-- Today's Appointments -->
            <div class="appointments-section">
                <div class="section-header">
                    <h3 class="section-title"><i class="fas fa-calendar-day"></i> Today's Appointments</h3>
                    <button class="refresh-btn" onclick="refreshQueue()">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                </div>

                @if (Model.TodaysAppointments.Any())
                {
                    @foreach (var appointment in Model.TodaysAppointments)
                    {
                        <div class="appointment-item">
                            <div class="appointment-info">
                                <div class="patient-name">@appointment.Patient.FirstName @appointment.Patient.LastName</div>
                                <div class="appointment-details">
                                    Queue #@appointment.QueueNumber |
                                    @appointment.Schedule.StartTime - @appointment.Schedule.EndTime |
                                    @appointment.ReasonForVisit
                                </div>
                            </div>
                            <div class="appointment-actions">
                                @if (appointment.AppointmentStatus == "Pending")
                                {
                                    <button class="status-btn confirm"
                                            data-appointment-id="@appointment.AppointmentId"
                                            data-status="Confirmed"
                                            onclick="updateAppointmentStatus(this.getAttribute('data-appointment-id'), this.getAttribute('data-status'))">
                                        Confirm
                                    </button>
                                }
                                @if (appointment.AppointmentStatus == "Confirmed")
                                {
                                    <button class="status-btn complete"
                                            data-appointment-id="@appointment.AppointmentId"
                                            data-status="Completed"
                                            onclick="updateAppointmentStatus(this.getAttribute('data-appointment-id'), this.getAttribute('data-status'))">
                                        Complete
                                    </button>
                                }
                                <button class="status-btn cancel"
                                        data-appointment-id="@appointment.AppointmentId"
                                        data-status="Cancelled"
                                        onclick="updateAppointmentStatus(this.getAttribute('data-appointment-id'), this.getAttribute('data-status'))">
                                    Cancel
                                </button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-calendar-times fa-3x mb-3"></i>
                        <p>No appointments scheduled for today.</p>
                    </div>
                }
            </div>

            <!-- Pending Appointments -->
            <div class="appointments-section">
                <div class="section-header">
                    <h3 class="section-title"><i class="fas fa-clock"></i> Pending Appointments</h3>
                </div>

                @if (Model.PendingAppointments.Any())
                {
                    @foreach (var appointment in Model.PendingAppointments)
                    {
                        <div class="appointment-item">
                            <div class="appointment-info">
                                <div class="patient-name">@appointment.Patient.FirstName @appointment.Patient.LastName</div>
                                <div class="appointment-details">
                                    @appointment.Schedule.Date.ToString("MMM dd, yyyy") |
                                    @appointment.Schedule.StartTime - @appointment.Schedule.EndTime |
                                    @appointment.ReasonForVisit
                                </div>
                            </div>
                            <div class="appointment-actions">
                                <button class="status-btn confirm"
                                        data-appointment-id="@appointment.AppointmentId"
                                        data-status="Confirmed"
                                        onclick="updateAppointmentStatus(this.getAttribute('data-appointment-id'), this.getAttribute('data-status'))">
                                    Confirm
                                </button>
                                <button class="status-btn cancel"
                                        data-appointment-id="@appointment.AppointmentId"
                                        data-status="Cancelled"
                                        onclick="updateAppointmentStatus(this.getAttribute('data-appointment-id'), this.getAttribute('data-status'))">
                                    Cancel
                                </button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-check-circle fa-3x mb-3"></i>
                        <p>All appointments are up to date!</p>
                    </div>
                }
            </div>
        </div>

        <!-- Sidebar -->
        <div class="sidebar">
            <!-- Quick Actions -->
            <div class="quick-actions">
                <h4 class="section-title"><i class="fas fa-bolt"></i> Quick Actions</h4>
                <a href="@Url.Action("Availability", "Schedule")" class="action-btn">
                    <i class="fas fa-calendar-plus"></i> Manage Schedules
                </a>
                <a href="@Url.Action("Index", "Appointments")" class="action-btn">
                    <i class="fas fa-list"></i> View All Appointments
                </a>
                <a href="@Url.Action("Index", "Precord")" class="action-btn">
                    <i class="fas fa-users"></i> Manage Patients
                </a>
                <a href="@Url.Action("Index", "Notification")" class="action-btn secondary">
                    <i class="fas fa-bell"></i> Send Notifications
                </a>
            </div>

            <!-- Recent Notifications -->
            <div class="notifications-panel">
                <h4 class="section-title"><i class="fas fa-bell"></i> Recent Notifications</h4>

                @if (Model.RecentNotifications.Any())
                {
                    @foreach (var notification in Model.RecentNotifications)
                    {
                        <div class="notification-item">
                            <div>@notification.Content</div>
                            <div class="notification-time">
                                @notification.NotifDateTime.ToString("MMM dd, HH:mm")
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center text-muted py-3">
                        <i class="fas fa-bell-slash fa-2x mb-2"></i>
                        <p>No recent notifications</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Patient Messages Section -->
    <div class="messages-section">
        <div class="messages-header">
            <h3 class="section-title"><i class="fas fa-comments"></i> Patient Messages</h3>
            <button class="refresh-btn" onclick="loadPatientMessages()">
                <i class="fas fa-sync-alt"></i> Refresh
            </button>
        </div>

        <div class="messages-content">
            <!-- Patient List -->
            <div class="patient-list" id="patientList">
                <div class="text-center text-muted py-4">
                    <i class="fas fa-inbox fa-3x mb-3"></i>
                    <p>No messages yet</p>
                </div>
            </div>

            <!-- Chat Area -->
            <div class="chat-area" id="chatArea">
                <div class="chat-empty">
                    <i class="fas fa-comments fa-3x"></i>
                    <p>Select a patient to view messages</p>
                </div>
                <div class="chat-content" style="display: none;">
                    <div class="chat-header-patient">
                        <span id="selectedPatientName">Patient Name</span>
                    </div>
                    <div class="chat-messages-staff" id="chatMessagesStaff"></div>
                    <div class="chat-input-staff">
                        <input type="text" id="replyInput" placeholder="Type your reply..." maxlength="500">
                        <button class="send-reply-btn" id="sendReply">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function updateAppointmentStatus(appointmentId, status) {
            console.log('updateAppointmentStatus called with (raw):', { appointmentId, status });
            console.log('appointmentId type:', typeof appointmentId);
            console.log('status type:', typeof status);

            // Parse appointmentId to integer
            const parsedId = parseInt(appointmentId, 10);

            console.log('Parsed appointmentId:', parsedId);

            if (!appointmentId || appointmentId === '0' || isNaN(parsedId) || parsedId === 0) {
                console.error('appointmentId is missing or invalid:', appointmentId, 'parsed:', parsedId);
                showMessage('Error: Invalid appointment ID', 'error');
                return;
            }

            if (!status || status.trim() === '') {
                console.error('status is missing or invalid:', status);
                showMessage('Error: Invalid status', 'error');
                return;
            }

            if (!confirm(`Are you sure you want to ${status.toLowerCase()} this appointment?`)) {
                return;
            }

            const requestData = {
                appointmentId: parsedId,
                status: status
            };

            console.log('Sending request:', requestData);

            fetch('/Dashboard/UpdateAppointmentStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(requestData)
            })
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Response data:', data);
                if (data.success) {
                    showMessage(data.message, 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                } else {
                    showMessage(data.message || 'Failed to update appointment', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('An error occurred while updating the appointment: ' + error.message, 'error');
            });
        }

        function refreshQueue() {
            fetch('/Dashboard/GetQueueStatus')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showMessage('Queue refreshed successfully!', 'success');
                        setTimeout(() => {
                            location.reload();
                        }, 1000);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('Error refreshing queue.', 'error');
                });
        }

        function showMessage(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const alertHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;

            // Insert at the top of the dashboard container
            const container = document.querySelector('.dashboard-container');
            container.insertAdjacentHTML('afterbegin', alertHtml);

            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                const alert = container.querySelector('.alert');
                if (alert) {
                    alert.remove();
                }
            }, 5000);
        }

        // Auto-refresh every 30 seconds
        setInterval(() => {
            refreshQueue();
        }, 30000);

        // ===== MESSAGING FUNCTIONALITY =====
        let selectedPatientUserId = null;
        let messagesInterval = null;

        // Initialize messaging when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Load patient messages on page load
            loadPatientMessages();

            // Auto-refresh messages every 10 seconds
            startMessagingAutoRefresh();

            // Send reply button click
            document.getElementById('sendReply').addEventListener('click', sendReplyToPatient);

            // Send reply on Enter key
            document.getElementById('replyInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendReplyToPatient();
                }
            });
        });

        // Load patient messages grouped by patient
        async function loadPatientMessages() {
            try {
                const response = await fetch('/Dashboard/GetPatientMessages');
                const result = await response.json();

                if (result.success && result.data) {
                    displayPatientList(result.data);
                } else {
                    console.error('Failed to load patient messages:', result.error);
                }
            } catch (error) {
                console.error('Error loading patient messages:', error);
            }
        }

        // Display patient list
        function displayPatientList(patients) {
            const patientList = document.getElementById('patientList');
            
            if (patients.length === 0) {
                patientList.innerHTML = `
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-inbox fa-3x mb-3"></i>
                        <p>No messages yet</p>
                    </div>
                `;
                return;
            }

            patientList.innerHTML = patients.map(patient => `
                <div class="patient-item ${selectedPatientUserId === patient.patientUserId ? 'active' : ''}" 
                     onclick="selectPatient(${patient.patientUserId}, '${escapeHtml(patient.patientName)}')">
                    <div class="patient-info">
                        <div class="patient-avatar">
                            <i class="fas fa-user"></i>
                        </div>
                        <div class="patient-details">
                            <div class="patient-name">${escapeHtml(patient.patientName)}</div>
                            <div class="last-message">${escapeHtml(patient.lastMessage.substring(0, 30))}${patient.lastMessage.length > 30 ? '...' : ''}</div>
                        </div>
                    </div>
                    <div class="message-time">${formatMessageTime(patient.lastMessageTime)}</div>
                </div>
            `).join('');
        }

        // Select a patient and load their messages
        async function selectPatient(patientUserId, patientName) {
            selectedPatientUserId = patientUserId;

            // Update UI
            document.getElementById('selectedPatientName').textContent = patientName;
            document.querySelector('.chat-empty').style.display = 'none';
            document.querySelector('.chat-content').style.display = 'flex';

            // Update active state in patient list
            document.querySelectorAll('.patient-item').forEach(item => {
                item.classList.remove('active');
            });
            event.target.closest('.patient-item').classList.add('active');

            // Load messages for this patient
            await loadMessagesForPatient(patientUserId);
        }

        // Load messages for a specific patient
        async function loadMessagesForPatient(patientUserId) {
            try {
                const response = await fetch('/Dashboard/GetMessages');
                const result = await response.json();

                if (result.success && result.data) {
                    // Filter messages for the selected patient
                    const patientMessages = result.data.filter(m => 
                        m.senderId === patientUserId || m.receiverId === patientUserId
                    );
                    displayStaffMessages(patientMessages);
                } else {
                    console.error('Failed to load messages:', result.error);
                }
            } catch (error) {
                console.error('Error loading messages:', error);
            }
        }

        // Display messages in staff chat area
        function displayStaffMessages(messages) {
            const chatMessagesStaff = document.getElementById('chatMessagesStaff');
            
            if (messages.length === 0) {
                chatMessagesStaff.innerHTML = `
                    <div class="no-messages">
                        <p>No messages yet</p>
                    </div>
                `;
                return;
            }

            chatMessagesStaff.innerHTML = messages.map(msg => {
                const messageClass = msg.isSent ? 'sent' : 'received';
                const messageTime = formatMessageTime(msg.createdAt);
                
                return `
                    <div class="message-staff ${messageClass}">
                        <div class="message-content">${escapeHtml(msg.message)}</div>
                        <div class="message-time">${messageTime}</div>
                    </div>
                `;
            }).join('');

            // Scroll to bottom
            chatMessagesStaff.scrollTop = chatMessagesStaff.scrollHeight;
        }

        // Send reply to patient
        async function sendReplyToPatient() {
            if (!selectedPatientUserId) {
                alert('Please select a patient first');
                return;
            }

            const replyInput = document.getElementById('replyInput');
            const messageText = replyInput.value.trim();

            if (!messageText) {
                return;
            }

            // Disable send button
            const sendButton = document.getElementById('sendReply');
            sendButton.disabled = true;
            sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

            try {
                const response = await fetch('/Dashboard/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ 
                        receiverId: selectedPatientUserId, 
                        message: messageText 
                    })
                });

                const result = await response.json();

                if (result.success) {
                    // Clear input
                    replyInput.value = '';

                    // Reload messages for the patient
                    await loadMessagesForPatient(selectedPatientUserId);

                    // Reload patient list to update last message
                    await loadPatientMessages();
                } else {
                    alert('Failed to send message: ' + (result.error || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error sending message:', error);
                alert('Error sending message. Please try again.');
            } finally {
                sendButton.disabled = false;
                sendButton.innerHTML = '<i class="fas fa-paper-plane"></i>';
            }
        }

        // Format message timestamp
        function formatMessageTime(timestamp) {
            const date = new Date(timestamp);
            const now = new Date();
            const diffMs = now - date;
            const diffMins = Math.floor(diffMs / 60000);
            const diffHours = Math.floor(diffMs / 3600000);
            const diffDays = Math.floor(diffMs / 86400000);

            if (diffMins < 1) {
                return 'Just now';
            } else if (diffMins < 60) {
                return `${diffMins} min ago`;
            } else if (diffHours < 24) {
                return `${diffHours} hr ago`;
            } else if (diffDays < 7) {
                return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
            } else {
                return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
            }
        }

        // Escape HTML to prevent XSS
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Start auto-refresh for messages
        function startMessagingAutoRefresh() {
            if (messagesInterval) {
                clearInterval(messagesInterval);
            }

            messagesInterval = setInterval(function() {
                loadPatientMessages();
                if (selectedPatientUserId) {
                    loadMessagesForPatient(selectedPatientUserId);
                }
            }, 10000); // Refresh every 10 seconds
        }

    </script>
}
