@model QuickClinique.Controllers.DashboardViewModel
@{
    ViewData["Title"] = "Clinic Staff Dashboard";
    Layout = "_Layout";
}

<style>
    /* CSS Variables */
    :root {
        --primary-teal: #4ECDC4;
        --secondary-teal: #44A08D;
        --dark-teal: #3BA89F;
        --light-bg: #F0F4F8;
        --white: #FFFFFF;
        --text-dark: #2D3748;
        --text-muted: #718096;
        --border-color: #E2E8F0;
        --success: #10B981;
        --warning: #F59E0B;
        --danger: #DC2626;
        --info: #3B82F6;
        --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.06);
        --shadow-md: 0 8px 24px rgba(0, 0, 0, 0.1);
        --shadow-lg: 0 16px 48px rgba(0, 0, 0, 0.12);
        --radius-sm: 8px;
        --radius-md: 12px;
        --radius-lg: 16px;
    }

    /* Dashboard Container */
    .dashboard-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2.5rem;
        background: linear-gradient(135deg, #F0F4F8 0%, #E2E8F0 100%);
        min-height: 100vh;
    }

    /* Dashboard Header */
    .dashboard-header {
        background: linear-gradient(135deg, var(--primary-teal) 0%, var(--secondary-teal) 100%);
        color: var(--white);
        padding: 2.5rem;
        border-radius: var(--radius-lg);
        margin-bottom: 2rem;
        box-shadow: var(--shadow-md);
        position: relative;
        overflow: hidden;
    }

        .dashboard-header::after {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            pointer-events: none;
        }

        .dashboard-header h1 {
            margin: 0;
            font-size: 2.25rem;
            font-weight: 700;
            position: relative;
            z-index: 1;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

            .dashboard-header h1 i {
                font-size: 2.5rem;
            }

        .dashboard-header p {
            margin: 0.75rem 0 0 0;
            opacity: 0.95;
            font-size: 1.1rem;
            position: relative;
            z-index: 1;
            font-weight: 500;
        }

    /* Statistics Grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    /* Center the last card if odd number */
    .stat-card:nth-child(7) {
        grid-column: 2 / 3;
    }

    .stat-card {
        background: var(--white);
        padding: 1.75rem;
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-md);
        border-left: 5px solid;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        display: flex;
        align-items: center;
        gap: 1.25rem;
        position: relative;
        overflow: hidden;
    }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-teal) 0%, var(--secondary-teal) 100%);
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }

        .stat-card.pending {
            border-left-color: var(--warning);
        }

        .stat-card.confirmed {
            border-left-color: var(--success);
        }

        .stat-card.completed {
            border-left-color: var(--info);
        }

        .stat-card.patients {
            border-left-color: #6f42c1;
        }

        .stat-card.slots {
            border-left-color: #fd7e14;
        }

        .stat-card.total {
            border-left-color: var(--primary-teal);
        }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: var(--radius-md);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.75rem;
        flex-shrink: 0;
    }

    .stat-card.total .stat-icon {
        background: linear-gradient(135deg, rgba(78, 205, 196, 0.1) 0%, rgba(68, 160, 141, 0.1) 100%);
        color: var(--primary-teal);
    }

    .stat-card.pending .stat-icon {
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.1) 0%, rgba(217, 119, 6, 0.1) 100%);
        color: var(--warning);
    }

    .stat-card.confirmed .stat-icon {
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(5, 150, 105, 0.1) 100%);
        color: var(--success);
    }

    .stat-card.completed .stat-icon {
        background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(37, 99, 235, 0.1) 100%);
        color: var(--info);
    }

    .stat-card.patients .stat-icon {
        background: linear-gradient(135deg, rgba(111, 66, 193, 0.1) 0%, rgba(91, 33, 182, 0.1) 100%);
        color: #6f42c1;
    }

    .stat-card.slots .stat-icon {
        background: linear-gradient(135deg, rgba(253, 126, 20, 0.1) 0%, rgba(234, 88, 12, 0.1) 100%);
        color: #fd7e14;
    }

    .stat-content {
        flex: 1;
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.25rem;
        color: var(--text-dark);
    }

    .stat-label {
        color: var(--text-muted);
        font-size: 0.85rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-weight: 600;
    }

    /* Content Grid */
    .content-grid {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 2rem;
    }

    .main-content {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    /* Appointments Section */
    .appointments-section {
        background: var(--white);
        border-radius: var(--radius-lg);
        padding: 2rem;
        box-shadow: var(--shadow-md);
        position: relative;
        overflow: hidden;
    }

        .appointments-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-teal) 0%, var(--secondary-teal) 100%);
        }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid var(--border-color);
    }

    .section-title {
        font-size: 1.35rem;
        font-weight: 700;
        color: var(--text-dark);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

        .section-title i {
            color: var(--primary-teal);
            font-size: 1.5rem;
        }

    .refresh-btn {
        background: linear-gradient(135deg, var(--primary-teal) 0%, var(--secondary-teal) 100%);
        color: var(--white);
        border: none;
        padding: 0.65rem 1.25rem;
        border-radius: var(--radius-sm);
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.85rem;
        letter-spacing: 0.5px;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 4px 14px rgba(78, 205, 196, 0.4);
    }

        .refresh-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(78, 205, 196, 0.5);
        }

        .refresh-btn i {
            font-size: 1rem;
        }

    .appointments-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .appointment-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.25rem;
        border: 2px solid var(--border-color);
        border-left: 4px solid var(--primary-teal);
        border-radius: var(--radius-md);
        background: linear-gradient(135deg, #F7FAFC 0%, #EDF2F7 100%);
        transition: all 0.3s ease;
    }

        .appointment-item:hover {
            background: linear-gradient(135deg, rgba(78, 205, 196, 0.05) 0%, rgba(68, 160, 141, 0.05) 100%);
            transform: translateX(5px);
            box-shadow: var(--shadow-sm);
        }

    .appointment-info {
        flex: 1;
    }

    .patient-name {
        font-weight: 700;
        color: var(--text-dark);
        margin-bottom: 0.5rem;
        font-size: 1.05rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .patient-name i {
            color: var(--primary-teal);
            font-size: 1.25rem;
        }

    .appointment-details {
        font-size: 0.9rem;
        color: var(--text-muted);
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .detail-item {
        display: inline-flex;
        align-items: center;
        gap: 0.35rem;
    }

        .detail-item i {
            color: var(--primary-teal);
            font-size: 0.85rem;
        }

    .appointment-actions {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .status-btn {
        padding: 0.6rem 1.1rem;
        border: none;
        border-radius: var(--radius-sm);
        cursor: pointer;
        font-size: 0.85rem;
        font-weight: 700;
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        white-space: nowrap;
    }

        .status-btn.confirm {
            background: linear-gradient(135deg, var(--success) 0%, #059669 100%);
            color: var(--white);
            box-shadow: 0 4px 14px rgba(16, 185, 129, 0.4);
        }

            .status-btn.confirm:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 24px rgba(16, 185, 129, 0.5);
            }

        .status-btn.complete {
            background: linear-gradient(135deg, var(--info) 0%, #2563EB 100%);
            color: var(--white);
            box-shadow: 0 4px 14px rgba(59, 130, 246, 0.4);
        }

            .status-btn.complete:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 24px rgba(59, 130, 246, 0.5);
            }

        .status-btn.cancel {
            background: linear-gradient(135deg, var(--danger) 0%, #991B1B 100%);
            color: var(--white);
            box-shadow: 0 4px 14px rgba(220, 38, 38, 0.4);
        }

            .status-btn.cancel:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 24px rgba(220, 38, 38, 0.5);
            }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 3rem 2rem;
        color: var(--text-muted);
    }

        .empty-state i {
            font-size: 4rem;
            color: var(--primary-teal);
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        .empty-state h4 {
            font-size: 1.5rem;
            color: var(--text-dark);
            margin-bottom: 0.5rem;
            font-weight: 700;
        }

        .empty-state p {
            font-size: 1rem;
            margin: 0;
        }

    /* Sidebar */
    .sidebar {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    /* Quick Actions */
    .quick-actions {
        background: var(--white);
        border-radius: var(--radius-lg);
        padding: 2rem;
        box-shadow: var(--shadow-md);
        position: relative;
        overflow: hidden;
    }

        .quick-actions::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-teal) 0%, var(--secondary-teal) 100%);
        }

        .quick-actions h4 {
            margin-bottom: 1.5rem;
        }

    .action-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.75rem;
        width: 100%;
        padding: 1rem;
        margin-bottom: 0.75rem;
        background: linear-gradient(135deg, var(--primary-teal) 0%, var(--secondary-teal) 100%);
        color: var(--white);
        text-decoration: none;
        border-radius: var(--radius-sm);
        text-align: center;
        transition: all 0.3s ease;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-size: 0.85rem;
        box-shadow: 0 4px 14px rgba(78, 205, 196, 0.4);
    }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(78, 205, 196, 0.5);
            color: var(--white);
        }

        .action-btn.secondary {
            background: linear-gradient(135deg, #6C757D 0%, #495057 100%);
            box-shadow: 0 4px 14px rgba(108, 117, 125, 0.3);
        }

            .action-btn.secondary:hover {
                box-shadow: 0 8px 24px rgba(108, 117, 125, 0.4);
            }

        .action-btn i {
            font-size: 1.1rem;
        }

    /* Notifications Panel */
    .notifications-panel {
        background: var(--white);
        border-radius: var(--radius-lg);
        padding: 2rem;
        box-shadow: var(--shadow-md);
        position: relative;
        overflow: hidden;
    }

        .notifications-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-teal) 0%, var(--secondary-teal) 100%);
        }

        .notifications-panel h4 {
            margin-bottom: 1.5rem;
        }

    .notification-item {
        padding: 1rem;
        border-left: 3px solid var(--primary-teal);
        background: linear-gradient(135deg, #F7FAFC 0%, #EDF2F7 100%);
        border-radius: var(--radius-sm);
        margin-bottom: 0.75rem;
        font-size: 0.9rem;
        transition: all 0.3s ease;
    }

        .notification-item:hover {
            background: linear-gradient(135deg, rgba(78, 205, 196, 0.05) 0%, rgba(68, 160, 141, 0.05) 100%);
            transform: translateX(5px);
        }

    .notification-time {
        color: var(--text-muted);
        font-size: 0.8rem;
        margin-top: 0.5rem;
        font-weight: 600;
    }

    /* Alert Messages */
    .alert {
        padding: 1.25rem 1.75rem;
        border-radius: var(--radius-md);
        border: none;
        display: flex;
        align-items: center;
        gap: 1rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        animation: slideDown 0.4s ease;
        box-shadow: var(--shadow-sm);
    }

    .alert-success {
        background: linear-gradient(135deg, #D1FAE5 0%, #ECFDF5 100%);
        color: #065F46;
        border-left: 4px solid var(--success);
    }

    .alert-danger {
        background: linear-gradient(135deg, #FEE2E2 0%, #FEF2F2 100%);
        color: #991B1B;
        border-left: 4px solid var(--danger);
    }
</style>

<div class="dashboard-container">
    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <h1><i class="fas fa-tachometer-alt"></i> Clinic Staff Dashboard</h1>
        <p>Welcome back, @Context.Session.GetString("ClinicStaffName")! Here's what's happening today.</p>
    </div>

    <!-- Statistics Cards -->
    <div class="stats-grid">
        <div class="stat-card total">
            <div class="stat-icon">
                <i class="fas fa-calendar-check"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.TotalAppointments</div>
                <div class="stat-label">Total Appointments</div>
            </div>
        </div>
        <div class="stat-card pending">
            <div class="stat-icon">
                <i class="fas fa-clock"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.PendingCount</div>
                <div class="stat-label">Pending</div>
            </div>
        </div>
        <div class="stat-card confirmed">
            <div class="stat-icon">
                <i class="fas fa-check-circle"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.ConfirmedCount</div>
                <div class="stat-label">Confirmed</div>
            </div>
        </div>
        <div class="stat-card completed">
            <div class="stat-icon">
                <i class="fas fa-clipboard-check"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.CompletedCount</div>
                <div class="stat-label">Completed</div>
            </div>
        </div>
        <div class="stat-card patients">
            <div class="stat-icon">
                <i class="fas fa-users"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.TotalPatients</div>
                <div class="stat-label">Total Patients</div>
            </div>
        </div>
        <div class="stat-card slots">
            <div class="stat-icon">
                <i class="fas fa-calendar-plus"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.AvailableSlots</div>
                <div class="stat-label">Available Slots</div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="content-grid">
        <div class="main-content">
            <!-- Today's Appointments -->
            <div class="appointments-section">
                <div class="section-header">
                    <h3 class="section-title"><i class="fas fa-calendar-day"></i> Today's Appointments</h3>
                    <button class="refresh-btn" onclick="refreshQueue()">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                </div>

                @if (Model.TodaysAppointments.Any())
                {
                    <div class="appointments-list">
                        @foreach (var appointment in Model.TodaysAppointments)
                        {
                            <div class="appointment-item">
                                <div class="appointment-info">
                                    <div class="patient-name">
                                        <i class="fas fa-user-circle"></i>
                                        @appointment.Patient.FirstName @appointment.Patient.LastName
                                    </div>
                                    <div class="appointment-details">
                                        <span class="detail-item">
                                            <i class="fas fa-hashtag"></i>
                                            Queue #@appointment.QueueNumber
                                        </span>
                                        <span class="detail-item">
                                            <i class="fas fa-clock"></i>
                                            @appointment.Schedule.StartTime - @appointment.Schedule.EndTime
                                        </span>
                                        <span class="detail-item">
                                            <i class="fas fa-notes-medical"></i>
                                            @appointment.ReasonForVisit
                                        </span>
                                    </div>
                                </div>
                                <div class="appointment-actions">
                                    @if (appointment.AppointmentStatus == "Pending")
                                    {
                                        <button class="status-btn confirm"
                                                data-appointment-id="@appointment.AppointmentId"
                                                data-status="Confirmed"
                                                onclick="updateAppointmentStatus(this.getAttribute('data-appointment-id'), this.getAttribute('data-status'))">
                                            <i class="fas fa-check"></i> Confirm
                                        </button>
                                    }
                                    @if (appointment.AppointmentStatus == "Confirmed")
                                    {
                                        <button class="status-btn complete"
                                                data-appointment-id="@appointment.AppointmentId"
                                                data-status="Completed"
                                                onclick="updateAppointmentStatus(this.getAttribute('data-appointment-id'), this.getAttribute('data-status'))">
                                            <i class="fas fa-check-double"></i> Complete
                                        </button>
                                    }
                                    <button class="status-btn cancel"
                                            data-appointment-id="@appointment.AppointmentId"
                                            data-status="Cancelled"
                                            onclick="updateAppointmentStatus(this.getAttribute('data-appointment-id'), this.getAttribute('data-status'))">
                                        <i class="fas fa-times"></i> Cancel
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <i class="fas fa-calendar-times"></i>
                        <h4>No appointments scheduled for today</h4>
                        <p>Check back later or create a new schedule.</p>
                    </div>
                }
            </div>

            <!-- Pending Appointments -->
            <div class="appointments-section">
                <div class="section-header">
                    <h3 class="section-title"><i class="fas fa-clock"></i> Pending Appointments</h3>
                </div>

                @if (Model.PendingAppointments.Any())
                {
                    <div class="appointments-list">
                        @foreach (var appointment in Model.PendingAppointments)
                        {
                            <div class="appointment-item">
                                <div class="appointment-info">
                                    <div class="patient-name">
                                        <i class="fas fa-user-circle"></i>
                                        @appointment.Patient.FirstName @appointment.Patient.LastName
                                    </div>
                                    <div class="appointment-details">
                                        <span class="detail-item">
                                            <i class="fas fa-calendar"></i>
                                            @appointment.Schedule.Date.ToString("MMM dd, yyyy")
                                        </span>
                                        <span class="detail-item">
                                            <i class="fas fa-clock"></i>
                                            @appointment.Schedule.StartTime - @appointment.Schedule.EndTime
                                        </span>
                                        <span class="detail-item">
                                            <i class="fas fa-notes-medical"></i>
                                            @appointment.ReasonForVisit
                                        </span>
                                    </div>
                                </div>
                                <div class="appointment-actions">
                                    <button class="status-btn confirm"
                                            data-appointment-id="@appointment.AppointmentId"
                                            data-status="Confirmed"
                                            onclick="updateAppointmentStatus(this.getAttribute('data-appointment-id'), this.getAttribute('data-status'))">
                                        <i class="fas fa-check"></i> Confirm
                                    </button>
                                    <button class="status-btn cancel"
                                            data-appointment-id="@appointment.AppointmentId"
                                            data-status="Cancelled"
                                            onclick="updateAppointmentStatus(this.getAttribute('data-appointment-id'), this.getAttribute('data-status'))">
                                        <i class="fas fa-times"></i> Cancel
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <i class="fas fa-check-circle"></i>
                        <h4>All appointments are up to date!</h4>
                        <p>Great job managing your schedule.</p>
                    </div>
                }
            </div>
        </div>

        <!-- Sidebar -->
        <div class="sidebar">
            <!-- Quick Actions -->
            <div class="quick-actions">
                <h4 class="section-title"><i class="fas fa-bolt"></i> Quick Actions</h4>
                <a href="@Url.Action("Availability", "Schedule")" class="action-btn">
                    <i class="fas fa-calendar-plus"></i> Manage Schedules
                </a>
                <a href="@Url.Action("Index", "Appointments")" class="action-btn">
                    <i class="fas fa-list"></i> View All Appointments
                </a>
                <a href="@Url.Action("Index", "Student")" class="action-btn">
                    <i class="fas fa-users"></i> Manage Patients
                </a>
                <a href="@Url.Action("Index", "Notification")" class="action-btn secondary">
                    <i class="fas fa-bell"></i> Send Notifications
                </a>
            </div>

            <!-- Recent Notifications -->
            <div class="notifications-panel">
                <h4 class="section-title"><i class="fas fa-bell"></i> Recent Notifications</h4>

                @if (Model.RecentNotifications.Any())
                {
                    @foreach (var notification in Model.RecentNotifications)
                    {
                        <div class="notification-item">
                            <div>@notification.Content</div>
                            <div class="notification-time">
                                @notification.NotifDateTime.ToString("MMM dd, HH:mm")
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <i class="fas fa-bell-slash"></i>
                        <h4>No recent notifications</h4>
                        <p>You're all caught up!</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script>
    function updateAppointmentStatus(appointmentId, status) {
        console.log('updateAppointmentStatus called with (raw):', { appointmentId, status });
        console.log('appointmentId type:', typeof appointmentId);
        console.log('status type:', typeof status);

        // Parse appointmentId to integer
        const parsedId = parseInt(appointmentId, 10);

        console.log('Parsed appointmentId:', parsedId);

        if (!appointmentId || appointmentId === '0' || isNaN(parsedId) || parsedId === 0) {
            console.error('appointmentId is missing or invalid:', appointmentId, 'parsed:', parsedId);
            showMessage('Error: Invalid appointment ID', 'error');
            return;
        }

        if (!status || status.trim() === '') {
            console.error('status is missing or invalid:', status);
            showMessage('Error: Invalid status', 'error');
            return;
        }

        if (!confirm(`Are you sure you want to ${status.toLowerCase()} this appointment?`)) {
            return;
        }

        const requestData = {
            appointmentId: parsedId,
            status: status
        };

        console.log('Sending request:', requestData);

        fetch('/Dashboard/UpdateAppointmentStatus', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(requestData)
        })
        .then(response => {
            console.log('Response status:', response.status);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Response data:', data);
            if (data.success) {
                showMessage(data.message, 'success');
                setTimeout(() => {
                    location.reload();
                }, 1000);
            } else {
                showMessage(data.message || 'Failed to update appointment', 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showMessage('An error occurred while updating the appointment: ' + error.message, 'error');
        });
    }

    function refreshQueue() {
        fetch('/Dashboard/GetQueueStatus')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showMessage('Queue refreshed successfully!', 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('Error refreshing queue.', 'error');
            });
    }

    function showMessage(message, type) {
        const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
        const alertHtml = `
            <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;

        // Insert at the top of the dashboard container
        const container = document.querySelector('.dashboard-container');
        container.insertAdjacentHTML('afterbegin', alertHtml);

        // Auto-dismiss after 5 seconds
        setTimeout(() => {
            const alert = container.querySelector('.alert');
            if (alert) {
                alert.remove();
            }
        }, 5000);
    }

    // Auto-refresh every 30 seconds
    setInterval(() => {
        refreshQueue();
    }, 30000);
</script>