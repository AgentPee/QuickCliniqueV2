@model QuickClinique.Controllers.DashboardViewModel
@{
    ViewData["Title"] = "Clinic Staff Dashboard";
}

@section Styles {
    <link rel="stylesheet" href="~/css/dashboard.css" asp-append-version="true" />
    <style>
        .dashboard-container {
            padding: 20px;
            background-color: #f8f9fa;
            min-height: 100vh;
        }

        .dashboard-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .dashboard-header h1 {
            margin: 0;
            font-size: 2.5rem;
            font-weight: 300;
        }

        .dashboard-header p {
            margin: 10px 0 0 0;
            opacity: 0.9;
            font-size: 1.1rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            border-left: 5px solid;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.15);
        }

        .stat-card.pending { border-left-color: #ffc107; }
        .stat-card.confirmed { border-left-color: #28a745; }
        .stat-card.completed { border-left-color: #17a2b8; }
        .stat-card.patients { border-left-color: #6f42c1; }
        .stat-card.slots { border-left-color: #fd7e14; }
        .stat-card.total { border-left-color: #007bff; }

        .stat-number {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #6c757d;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .content-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 30px;
        }

        .main-content {
            display: flex;
            flex-direction: column;
            gap: 30px;
        }

        .appointments-section {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }

        .section-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e9ecef;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #495057;
            margin: 0;
        }

        .refresh-btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 8px;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .refresh-btn:hover {
            background: #0056b3;
        }

        .appointment-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            margin-bottom: 10px;
            background: #f8f9fa;
            transition: all 0.3s ease;
        }

        .appointment-item:hover {
            background: #e9ecef;
            transform: translateX(5px);
        }

        .appointment-info {
            flex: 1;
        }

        .patient-name {
            font-weight: 600;
            color: #495057;
            margin-bottom: 5px;
        }

        .appointment-details {
            font-size: 0.9rem;
            color: #6c757d;
        }

        .appointment-actions {
            display: flex;
            gap: 10px;
        }

        .status-btn {
            padding: 5px 12px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.8rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .status-btn.confirm {
            background: #28a745;
            color: white;
        }

        .status-btn.complete {
            background: #17a2b8;
            color: white;
        }

        .status-btn.cancel {
            background: #dc3545;
            color: white;
        }

        .status-btn:hover {
            transform: scale(1.05);
        }

        .queue-section {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }

        .queue-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            border-left: 4px solid #007bff;
            background: #f8f9fa;
            border-radius: 8px;
            margin-bottom: 10px;
        }

        .queue-number {
            font-size: 1.2rem;
            font-weight: bold;
            color: #007bff;
        }

        .sidebar {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .notifications-panel {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }

        .notification-item {
            padding: 12px;
            border-left: 3px solid #007bff;
            background: #f8f9fa;
            border-radius: 8px;
            margin-bottom: 10px;
            font-size: 0.9rem;
        }

        .notification-time {
            color: #6c757d;
            font-size: 0.8rem;
            margin-top: 5px;
        }

        .quick-actions {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }

        .action-btn {
            display: block;
            width: 100%;
            padding: 12px;
            margin-bottom: 10px;
            background: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 8px;
            text-align: center;
            transition: background 0.3s ease;
        }

        .action-btn:hover {
            background: #0056b3;
            color: white;
        }

        .action-btn.secondary {
            background: #6c757d;
        }

        .action-btn.secondary:hover {
            background: #545b62;
        }

        @@media (max-width: 768px) {
            .content-grid {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            }
        }
    </style>
}

<div class="dashboard-container">
    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <h1><i class="fas fa-tachometer-alt"></i> Clinic Staff Dashboard</h1>
        <p>Welcome back, @Context.Session.GetString("ClinicStaffName")! Here's what's happening today.</p>
    </div>

    <!-- Statistics Cards -->
    <div class="stats-grid">
        <div class="stat-card total">
            <div class="stat-number">@Model.TotalAppointments</div>
            <div class="stat-label">Total Appointments</div>
        </div>
        <div class="stat-card pending">
            <div class="stat-number">@Model.PendingCount</div>
            <div class="stat-label">Pending</div>
        </div>
        <div class="stat-card confirmed">
            <div class="stat-number">@Model.ConfirmedCount</div>
            <div class="stat-label">Confirmed</div>
        </div>
        <div class="stat-card completed">
            <div class="stat-number">@Model.CompletedCount</div>
            <div class="stat-label">Completed</div>
        </div>
        <div class="stat-card patients">
            <div class="stat-number">@Model.TotalPatients</div>
            <div class="stat-label">Total Patients</div>
        </div>
        <div class="stat-card slots">
            <div class="stat-number">@Model.AvailableSlots</div>
            <div class="stat-label">Available Slots</div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="content-grid">
        <div class="main-content">
            <!-- Today's Appointments -->
            <div class="appointments-section">
                <div class="section-header">
                    <h3 class="section-title"><i class="fas fa-calendar-day"></i> Today's Appointments</h3>
                    <button class="refresh-btn" onclick="refreshQueue()">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                </div>
                
                @if (Model.TodaysAppointments.Any())
                {
                    @foreach (var appointment in Model.TodaysAppointments)
                    {
                        <div class="appointment-item">
                            <div class="appointment-info">
                                <div class="patient-name">@appointment.Patient.FirstName @appointment.Patient.LastName</div>
                                <div class="appointment-details">
                                    Queue #@appointment.QueueNumber | 
                                    @appointment.Schedule.StartTime - @appointment.Schedule.EndTime | 
                                    @appointment.ReasonForVisit
                                </div>
                            </div>
                            <div class="appointment-actions">
                                @if (appointment.AppointmentStatus == "Pending")
                                {
                                    <button class="status-btn confirm" 
                                            data-appointment-id="@appointment.AppointmentId" 
                                            data-status="Confirmed"
                                            onclick="updateAppointmentStatus(this.getAttribute('data-appointment-id'), this.getAttribute('data-status'))">
                                        Confirm
                                    </button>
                                }
                                @if (appointment.AppointmentStatus == "Confirmed")
                                {
                                    <button class="status-btn complete" 
                                            data-appointment-id="@appointment.AppointmentId" 
                                            data-status="Completed"
                                            onclick="updateAppointmentStatus(this.getAttribute('data-appointment-id'), this.getAttribute('data-status'))">
                                        Complete
                                    </button>
                                }
                                <button class="status-btn cancel" 
                                        data-appointment-id="@appointment.AppointmentId" 
                                        data-status="Cancelled"
                                        onclick="updateAppointmentStatus(this.getAttribute('data-appointment-id'), this.getAttribute('data-status'))">
                                    Cancel
                                </button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-calendar-times fa-3x mb-3"></i>
                        <p>No appointments scheduled for today.</p>
                    </div>
                }
            </div>

            <!-- Pending Appointments -->
            <div class="appointments-section">
                <div class="section-header">
                    <h3 class="section-title"><i class="fas fa-clock"></i> Pending Appointments</h3>
                </div>
                
                @if (Model.PendingAppointments.Any())
                {
                    @foreach (var appointment in Model.PendingAppointments)
                    {
                        <div class="appointment-item">
                            <div class="appointment-info">
                                <div class="patient-name">@appointment.Patient.FirstName @appointment.Patient.LastName</div>
                                <div class="appointment-details">
                                    @appointment.Schedule.Date.ToString("MMM dd, yyyy") | 
                                    @appointment.Schedule.StartTime - @appointment.Schedule.EndTime | 
                                    @appointment.ReasonForVisit
                                </div>
                            </div>
                            <div class="appointment-actions">
                                <button class="status-btn confirm" 
                                        data-appointment-id="@appointment.AppointmentId" 
                                        data-status="Confirmed"
                                        onclick="updateAppointmentStatus(this.getAttribute('data-appointment-id'), this.getAttribute('data-status'))">
                                    Confirm
                                </button>
                                <button class="status-btn cancel" 
                                        data-appointment-id="@appointment.AppointmentId" 
                                        data-status="Cancelled"
                                        onclick="updateAppointmentStatus(this.getAttribute('data-appointment-id'), this.getAttribute('data-status'))">
                                    Cancel
                                </button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-check-circle fa-3x mb-3"></i>
                        <p>All appointments are up to date!</p>
                    </div>
                }
            </div>
        </div>

        <!-- Sidebar -->
        <div class="sidebar">
            <!-- Quick Actions -->
            <div class="quick-actions">
                <h4 class="section-title"><i class="fas fa-bolt"></i> Quick Actions</h4>
                <a href="@Url.Action("Availability", "Schedule")" class="action-btn">
                    <i class="fas fa-calendar-plus"></i> Manage Schedules
                </a>
                <a href="@Url.Action("Index", "Appointments")" class="action-btn">
                    <i class="fas fa-list"></i> View All Appointments
                </a>
                <a href="@Url.Action("Index", "Student")" class="action-btn">
                    <i class="fas fa-users"></i> Manage Patients
                </a>
                <a href="@Url.Action("Index", "Notification")" class="action-btn secondary">
                    <i class="fas fa-bell"></i> Send Notifications
                </a>
            </div>

            <!-- Recent Notifications -->
            <div class="notifications-panel">
                <h4 class="section-title"><i class="fas fa-bell"></i> Recent Notifications</h4>
                
                @if (Model.RecentNotifications.Any())
                {
                    @foreach (var notification in Model.RecentNotifications)
                    {
                        <div class="notification-item">
                            <div>@notification.Content</div>
                            <div class="notification-time">
                                @notification.NotifDateTime.ToString("MMM dd, HH:mm")
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center text-muted py-3">
                        <i class="fas fa-bell-slash fa-2x mb-2"></i>
                        <p>No recent notifications</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function updateAppointmentStatus(appointmentId, status) {
            console.log('updateAppointmentStatus called with (raw):', { appointmentId, status });
            console.log('appointmentId type:', typeof appointmentId);
            console.log('status type:', typeof status);
            
            // Parse appointmentId to integer
            const parsedId = parseInt(appointmentId, 10);
            
            console.log('Parsed appointmentId:', parsedId);
            
            if (!appointmentId || appointmentId === '0' || isNaN(parsedId) || parsedId === 0) {
                console.error('appointmentId is missing or invalid:', appointmentId, 'parsed:', parsedId);
                showMessage('Error: Invalid appointment ID', 'error');
                return;
            }
            
            if (!status || status.trim() === '') {
                console.error('status is missing or invalid:', status);
                showMessage('Error: Invalid status', 'error');
                return;
            }
            
            if (!confirm(`Are you sure you want to ${status.toLowerCase()} this appointment?`)) {
                return;
            }

            const requestData = {
                appointmentId: parsedId,
                status: status
            };
            
            console.log('Sending request:', requestData);

            fetch('/Dashboard/UpdateAppointmentStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(requestData)
            })
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Response data:', data);
                if (data.success) {
                    showMessage(data.message, 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                } else {
                    showMessage(data.message || 'Failed to update appointment', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('An error occurred while updating the appointment: ' + error.message, 'error');
            });
        }

        function refreshQueue() {
            fetch('/Dashboard/GetQueueStatus')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showMessage('Queue refreshed successfully!', 'success');
                        setTimeout(() => {
                            location.reload();
                        }, 1000);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('Error refreshing queue.', 'error');
                });
        }

        function showMessage(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const alertHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            // Insert at the top of the dashboard container
            const container = document.querySelector('.dashboard-container');
            container.insertAdjacentHTML('afterbegin', alertHtml);
            
            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                const alert = container.querySelector('.alert');
                if (alert) {
                    alert.remove();
                }
            }, 5000);
        }

        // Auto-refresh every 30 seconds
        setInterval(() => {
            refreshQueue();
        }, 30000);
    </script>
}
