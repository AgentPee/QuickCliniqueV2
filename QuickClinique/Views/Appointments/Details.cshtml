@model QuickClinique.Models.Appointment
@{
    ViewData["Title"] = "Appointment Details";
}

@section Styles {
    <style>
        .details-container {
            max-width: 1000px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .details-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            border-radius: 15px 15px 0 0;
            margin-bottom: 0;
        }

        .details-header h2 {
            margin: 0;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .details-header .appointment-id {
            opacity: 0.9;
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }

        .details-body {
            background: white;
            padding: 2rem;
            border-radius: 0 0 15px 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .status-banner {
            padding: 1rem;
            border-radius: 10px;
            margin-bottom: 2rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            font-weight: 600;
        }

        .status-banner i {
            font-size: 1.5rem;
        }

        .status-pending {
            background: #fff3cd;
            color: #856404;
            border-left: 4px solid #ffc107;
        }

        .status-confirmed {
            background: #d1ecf1;
            color: #0c5460;
            border-left: 4px solid #17a2b8;
        }

        .status-in-progress {
            background: #d4edda;
            color: #155724;
            border-left: 4px solid #28a745;
        }

        .status-completed {
            background: #cce5ff;
            color: #004085;
            border-left: 4px solid #007bff;
        }

        .status-cancelled {
            background: #f8d7da;
            color: #721c24;
            border-left: 4px solid #dc3545;
        }

        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .info-section {
            background: #f8f9fa;
            padding: 1.5rem;
            border-radius: 10px;
            border-left: 4px solid #667eea;
        }

        .info-section h3 {
            color: #2d3748;
            margin: 0 0 1rem;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .info-section h3 i {
            color: #667eea;
        }

        .info-item {
            display: flex;
            margin-bottom: 0.75rem;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid #e2e8f0;
        }

        .info-item:last-child {
            margin-bottom: 0;
            padding-bottom: 0;
            border-bottom: none;
        }

        .info-label {
            font-weight: 600;
            color: #4a5568;
            min-width: 140px;
        }

        .info-value {
            color: #2d3748;
            flex: 1;
        }

        .symptoms-box {
            background: #fff;
            padding: 1rem;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
            margin-top: 0.5rem;
        }

        .action-buttons {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            padding-top: 2rem;
            border-top: 2px solid #e2e8f0;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            text-decoration: none;
            border: none;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
            color: white;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-success:hover {
            background: #218838;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(40, 167, 69, 0.4);
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(220, 53, 69, 0.4);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
        }

        .queue-info {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            background: #667eea;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 600;
        }

        @@media (max-width: 768px) {
            .info-grid {
                grid-template-columns: 1fr;
            }

            .action-buttons {
                flex-direction: column;
            }

            .btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
}

<div class="details-container">
    <div class="details-header">
        <h2>
            <i class="fas fa-calendar-check"></i>
            Appointment Details
        </h2>
        <div class="appointment-id">Appointment ID: #@Model.AppointmentId</div>
    </div>

    <div class="details-body">
        <!-- Status Banner -->
        <div class="status-banner status-@Model.AppointmentStatus.ToLower().Replace(" ", "-")">
            <i class="fas fa-info-circle"></i>
            <div>
                <strong>Status:</strong> @Model.AppointmentStatus
                <div style="font-size: 0.9rem; font-weight: normal; margin-top: 0.25rem;">
                    Queue Status: @Model.QueueStatus | Queue Number: #@Model.QueueNumber
                </div>
            </div>
        </div>

        <!-- Information Grid -->
        <div class="info-grid">
            <!-- Patient Information -->
            <div class="info-section">
                <h3><i class="fas fa-user"></i> Patient Information</h3>
                <div class="info-item">
                    <span class="info-label">Name:</span>
                    <span class="info-value">@Model.Patient?.FullName</span>
                </div>
                <div class="info-item">
                    <span class="info-label">ID Number:</span>
                    <span class="info-value">@Model.Patient?.Idnumber</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Email:</span>
                    <span class="info-value">@Model.Patient?.Email</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Phone:</span>
                    <span class="info-value">@Model.Patient?.PhoneNumber</span>
                </div>
            </div>

            <!-- Appointment Information -->
            <div class="info-section">
                <h3><i class="fas fa-calendar-alt"></i> Appointment Information</h3>
                <div class="info-item">
                    <span class="info-label">Date:</span>
                    <span class="info-value">
                        @if (Model.Schedule != null)
                        {
                            @Model.Schedule.Date.ToString("dddd, MMMM dd, yyyy")
                        }
                        else
                        {
                            <span>Not scheduled</span>
                        }
                    </span>
                </div>
                <div class="info-item">
                    <span class="info-label">Time:</span>
                    <span class="info-value">
                        @if (Model.Schedule != null)
                        {
                            <text>@Model.Schedule.StartTime.ToString(@"h:mm tt") - @Model.Schedule.EndTime.ToString(@"h:mm tt")</text>
                        }
                        else
                        {
                            <span>Not scheduled</span>
                        }
                    </span>
                </div>
                <div class="info-item">
                    <span class="info-label">Date Booked:</span>
                    <span class="info-value">@Model.DateBooked.ToString("MMMM dd, yyyy")</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Queue Position:</span>
                    <span class="info-value">
                        <span class="queue-info">
                            <i class="fas fa-list-ol"></i>
                            #@Model.QueueNumber
                        </span>
                    </span>
                </div>
            </div>
        </div>

        <!-- Medical Information -->
        <div class="info-section">
            <h3><i class="fas fa-stethoscope"></i> Medical Information</h3>
            <div class="info-item">
                <span class="info-label">Reason for Visit:</span>
                <span class="info-value">@Model.ReasonForVisit</span>
            </div>
            <div class="info-item">
                <span class="info-label">Symptoms:</span>
                <span class="info-value">
                    <div class="symptoms-box">
                        @if (!string.IsNullOrEmpty(Model.Symptoms) && Model.Symptoms != "No symptoms provided")
                        {
                            @Model.Symptoms
                        }
                        else
                        {
                            <em style="color: #6c757d;">No symptoms provided</em>
                        }
                    </div>
                </span>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons">
            <a href="@Url.Action("Index")" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to List
            </a>

            @if (Context.Session.GetInt32("ClinicStaffId") != null)
            {
                @if (Model.AppointmentStatus == "Pending")
                {
                    <button type="button" class="btn btn-success" onclick="confirmAppointment(@Model.AppointmentId)">
                        <i class="fas fa-check"></i> Confirm Appointment
                    </button>
                }

                @if (Model.AppointmentStatus != "Cancelled" && Model.AppointmentStatus != "Completed")
                {
                    <button type="button" class="btn btn-danger" onclick="cancelAppointment(@Model.AppointmentId)">
                        <i class="fas fa-times"></i> Cancel Appointment
                    </button>
                }

                @if (Model.AppointmentStatus == "Confirmed")
                {
                    <button type="button" class="btn btn-primary" onclick="startAppointment(@Model.AppointmentId)">
                        <i class="fas fa-play"></i> Start Appointment
                    </button>
                }

                @if (Model.AppointmentStatus == "In Progress")
                {
                    <button type="button" class="btn btn-primary" onclick="completeAppointment(@Model.AppointmentId)">
                        <i class="fas fa-check-circle"></i> Complete Appointment
                    </button>
                }
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function confirmAppointment(appointmentId) {
            if (!confirm('Are you sure you want to confirm this appointment?')) {
                return;
            }

            $.ajax({
                url: '@Url.Action("ConfirmAppointment", "Appointments")',
                type: 'POST',
                data: {
                    appointmentId: appointmentId,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        alert('Appointment confirmed successfully!');
                        location.reload();
                    } else {
                        alert('Error: ' + (response.error || 'Failed to confirm appointment'));
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        }

        function cancelAppointment(appointmentId) {
            if (!confirm('Are you sure you want to cancel this appointment? This action cannot be undone.')) {
                return;
            }

            const reason = prompt('Please enter a reason for cancellation (optional):');

            $.ajax({
                url: '@Url.Action("CancelAppointment", "Appointments")',
                type: 'POST',
                data: {
                    appointmentId: appointmentId,
                    reason: reason || 'Cancelled by clinic staff',
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        alert('Appointment cancelled successfully!');
                        location.reload();
                    } else {
                        alert('Error: ' + (response.error || 'Failed to cancel appointment'));
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        }

        function startAppointment(appointmentId) {
            if (!confirm('Start this appointment? The patient will be marked as being served.')) {
                return;
            }

            $.ajax({
                url: '@Url.Action("UpdateStatus", "Appointments")',
                type: 'POST',
                data: {
                    appointmentId: appointmentId,
                    status: 'In Progress',
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        alert('Appointment started!');
                        location.reload();
                    } else {
                        alert('Error: ' + (response.error || 'Failed to start appointment'));
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        }

        function completeAppointment(appointmentId) {
            if (!confirm('Mark this appointment as completed?')) {
                return;
            }

            $.ajax({
                url: '@Url.Action("UpdateStatus", "Appointments")',
                type: 'POST',
                data: {
                    appointmentId: appointmentId,
                    status: 'Completed',
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        alert('Appointment completed!');
                        location.reload();
                    } else {
                        alert('Error: ' + (response.error || 'Failed to complete appointment'));
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        }
    </script>
    @Html.AntiForgeryToken()
}

