@model IEnumerable<QuickClinique.Models.Appointment>
@{
    ViewData["Title"] = "Queue Management";
}

@section Styles {
    <style>
        .queue-management {
            padding: 20px;
        }
        
        .queue-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e9ecef;
        }
        
        .current-patient {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 30px;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        }
        
        .current-patient h3 {
            margin-bottom: 10px;
            font-size: 1.5em;
        }
        
        .patient-name {
            font-size: 2em;
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .queue-number {
            font-size: 1.2em;
            opacity: 0.9;
        }
        
        .queue-controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 20px;
        }
        
        .btn-large {
            padding: 15px 30px;
            font-size: 1.1em;
            border-radius: 8px;
        }
        
        .waiting-queue {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .queue-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            margin-bottom: 10px;
            background: #f8f9fa;
            border-radius: 10px;
            border-left: 4px solid #007bff;
        }
        
        .queue-item.current {
            background: #d4edda;
            border-left-color: #28a745;
        }
        
        .queue-item.in-progress {
            background: #fff3cd;
            border-left-color: #ffc107;
        }
        
        .queue-info {
            flex: 1;
        }
        
        .queue-number-badge {
            background: #007bff;
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-weight: bold;
            margin-right: 15px;
        }
        
        .queue-number-badge.current {
            background: #28a745;
        }
        
        .queue-number-badge.in-progress {
            background: #ffc107;
            color: #212529;
        }
        
        .patient-details h5 {
            margin: 0;
            color: #333;
        }
        
        .patient-details p {
            margin: 5px 0 0 0;
            color: #666;
            font-size: 0.9em;
        }
        
        .queue-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .stat-number {
            font-size: 2.5em;
            font-weight: bold;
            color: #007bff;
            margin-bottom: 5px;
        }
        
        .stat-label {
            color: #6c757d;
            font-size: 0.9em;
        }
        
        .no-patients {
            text-align: center;
            padding: 40px;
            color: #6c757d;
        }
        
        .no-patients i {
            font-size: 3em;
            margin-bottom: 15px;
            opacity: 0.5;
        }
        
        .auto-refresh {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .auto-refresh-toggle {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }
        
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 24px;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        
        input:checked + .slider {
            background-color: #007bff;
        }
        
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        
        @@media (max-width: 768px) {
            .queue-header {
                flex-direction: column;
                gap: 15px;
            }
            
            .queue-controls {
                flex-direction: column;
                align-items: center;
            }
            
            .queue-item {
                flex-direction: column;
                gap: 10px;
                text-align: center;
            }
            
            .queue-stats {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
}

<div class="queue-management">
    <div class="queue-header">
        <h2><i class="fas fa-users"></i> Queue Management</h2>
        <div class="auto-refresh">
            <div class="auto-refresh-toggle">
                <label class="switch">
                    <input type="checkbox" id="autoRefreshToggle">
                    <span class="slider"></span>
                </label>
                <span>Auto-refresh</span>
            </div>
            <button class="btn btn-primary" onclick="refreshQueue()">
                <i class="fas fa-sync-alt"></i> Refresh
            </button>
        </div>
    </div>

    <!-- Queue Statistics -->
    <div class="queue-stats">
        <div class="stat-card">
            <div class="stat-number" id="totalWaiting">@Model.Count(a => a.AppointmentStatus == "Confirmed" && a.QueueStatus == "Waiting")</div>
            <div class="stat-label">Waiting</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="inProgress">@Model.Count(a => a.AppointmentStatus == "In Progress")</div>
            <div class="stat-label">In Progress</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="completedToday">@Model.Count(a => a.AppointmentStatus == "Completed")</div>
            <div class="stat-label">Completed Today</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="averageWaitTime">-</div>
            <div class="stat-label">Avg Wait Time</div>
        </div>
    </div>

    <!-- Current Patient -->
    @{
        var currentPatient = Model.FirstOrDefault(a => a.AppointmentStatus == "In Progress");
    }
    
    @if (currentPatient != null)
    {
        <div class="current-patient">
            <h3><i class="fas fa-user-md"></i> Currently Serving</h3>
            <div class="patient-name">@currentPatient.Patient.FullName</div>
            <div class="queue-number">Queue #@currentPatient.QueueNumber</div>
            <div class="queue-controls">
                <button class="btn btn-success btn-large" onclick="completeAppointment(@currentPatient.AppointmentId)">
                    <i class="fas fa-check-circle"></i> Complete Appointment
                </button>
                <button class="btn btn-warning btn-large" onclick="nextInQueue()">
                    <i class="fas fa-forward"></i> Next Patient
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="current-patient">
            <h3><i class="fas fa-user-md"></i> No Patient Currently Being Served</h3>
            <div class="queue-controls">
                <button class="btn btn-primary btn-large" onclick="nextInQueue()">
                    <i class="fas fa-play"></i> Start Next Patient
                </button>
            </div>
        </div>
    }

    <!-- Waiting Queue -->
    <div class="waiting-queue">
        <h4><i class="fas fa-clock"></i> Waiting Queue</h4>
        
        @{
            var waitingPatients = Model.Where(a => a.AppointmentStatus == "Confirmed" && a.QueueStatus == "Waiting")
                                      .OrderBy(a => a.QueueNumber)
                                      .ToList();
        }
        
        @if (waitingPatients.Any())
        {
            @foreach (var patient in waitingPatients)
            {
                <div class="queue-item">
                    <div class="queue-number-badge">#@patient.QueueNumber</div>
                    <div class="queue-info">
                        <div class="patient-details">
                            <h5>@patient.Patient.FullName</h5>
                            <p>@patient.ReasonForVisit</p>
                            <p><i class="fas fa-clock"></i> @patient.Schedule.StartTime.ToString("h:mm tt") - @patient.Schedule.EndTime.ToString("h:mm tt")</p>
                        </div>
                    </div>
                    <div>
                        <button class="btn btn-primary btn-sm" onclick="startAppointment(@patient.AppointmentId)">
                            <i class="fas fa-play"></i> Start
                        </button>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="no-patients">
                <i class="fas fa-user-friends"></i>
                <h5>No patients waiting in queue</h5>
                <p>All appointments for today have been processed or no appointments are scheduled.</p>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        let autoRefreshInterval;
        
        // Auto-refresh functionality
        document.getElementById('autoRefreshToggle').addEventListener('change', function() {
            if (this.checked) {
                startAutoRefresh();
            } else {
                stopAutoRefresh();
            }
        });

        function startAutoRefresh() {
            autoRefreshInterval = setInterval(refreshQueue, 10000); // Refresh every 10 seconds
        }

        function stopAutoRefresh() {
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
            }
        }

        function refreshQueue() {
            location.reload();
        }

        async function nextInQueue() {
            try {
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                const response = await fetch('/Appointments/NextInQueue', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token,
                        'X-CSRF-TOKEN': token
                    }
                });

                const result = await response.json();
                
                if (result.success) {
                    alert(result.message);
                    location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error moving to next patient:', error);
                alert('An error occurred while moving to the next patient.');
            }
        }

        async function startAppointment(appointmentId) {
            if (!confirm('Are you sure you want to start this appointment?')) {
                return;
            }

            try {
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                const response = await fetch('/Appointments/UpdateStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token,
                        'X-CSRF-TOKEN': token
                    },
                    body: JSON.stringify({
                        appointmentId: appointmentId,
                        status: 'In Progress'
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    alert(result.message);
                    location.reload();
                } else {
                    alert('Error: ' + result.error);
                }
            } catch (error) {
                console.error('Error starting appointment:', error);
                alert('An error occurred while starting the appointment.');
            }
        }

        async function completeAppointment(appointmentId) {
            if (!confirm('Are you sure you want to mark this appointment as completed?')) {
                return;
            }

            try {
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                const response = await fetch('/Appointments/UpdateStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token,
                        'X-CSRF-TOKEN': token
                    },
                    body: JSON.stringify({
                        appointmentId: appointmentId,
                        status: 'Completed'
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    alert(result.message);
                    location.reload();
                } else {
                    alert('Error: ' + result.error);
                }
            } catch (error) {
                console.error('Error completing appointment:', error);
                alert('An error occurred while completing the appointment.');
            }
        }

        // Start auto-refresh by default
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('autoRefreshToggle').checked = true;
            startAutoRefresh();
        });
    </script>
}
